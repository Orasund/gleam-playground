[{"id":"module:Shape","longname":"module:Shape","name":"Shape","kind":"module","requires":["module:core","module:constants"],"customTags":[{"tag":"submodule","value":"2D Primitives"},{"tag":"for","value":"p5"}],"meta":{"lineno":1,"filename":"2d_primitives.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":0},{"id":"module:Shape~p5#_normalizeArcAngles","longname":"module:Shape~p5#_normalizeArcAngles","name":"_normalizeArcAngles","kind":"function","scope":"instance","description":"This function does 3 things:\n\n  1. Bounds the desired start/stop angles for an arc (in radians) so that:\n\n         0 <= start < TWO_PI ;    start <= stop < start + TWO_PI\n\n     This means that the arc rendering functions don't have to be concerned\n     with what happens if stop is smaller than start, or if the arc 'goes\n     round more than once', etc.: they can just start at start and increase\n     until stop and the correct arc will be drawn.\n\n  2. Optionally adjusts the angles within each quadrant to counter the naive\n     scaling of the underlying ellipse up from the unit circle.  Without\n     this, the angles become arbitrary when width != height: 45 degrees\n     might be drawn at 5 degrees on a 'wide' ellipse, or at 85 degrees on\n     a 'tall' ellipse.\n\n  3. Flags up when start and stop correspond to the same place on the\n     underlying ellipse.  This is useful if you want to do something special\n     there (like rendering a whole ellipse instead).","memberof":"module:Shape~p5","meta":{"lineno":38,"filename":"2d_primitives.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":1},{"id":"module:Shape~arc","longname":"module:Shape~arc","name":"arc","kind":"function","scope":"inner","description":"Draws an arc.\n\nAn arc is a section of an ellipse defined by the `x`, `y`, `w`, and\n`h` parameters. `x` and `y` set the location of the arc's center. `w` and\n`h` set the arc's width and height. See\n<a href=\"#/p5/ellipse\">ellipse()</a> and\n<a href=\"#/p5/ellipseMode\">ellipseMode()</a> for more details.\n\nThe fifth and sixth parameters, `start` and `stop`, set the angles\nbetween which to draw the arc. Arcs are always drawn clockwise from\n`start` to `stop`. Angles are always given in radians.\n\nThe seventh parameter, `mode`, is optional. It determines the arc's fill\nstyle. The fill modes are a semi-circle (`OPEN`), a closed semi-circle\n(`CHORD`), or a closed pie segment (`PIE`).\n\nThe eighth parameter, `detail`, is also optional. It determines how many\nvertices are used to draw the arc in WebGL mode. The default value is 25.","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"description":"x-coordinate of the arc's ellipse.","name":"x"},{"type":{"names":["Number"]},"description":"y-coordinate of the arc's ellipse.","name":"y"},{"type":{"names":["Number"]},"description":"width of the arc's ellipse by default.","name":"w"},{"type":{"names":["Number"]},"description":"height of the arc's ellipse by default.","name":"h"},{"type":{"names":["Number"]},"description":"angle to start the arc, specified in radians.","name":"start"},{"type":{"names":["Number"]},"description":"angle to stop the arc, specified in radians.","name":"stop"},{"type":{"names":["Constant"]},"optional":true,"description":"optional parameter to determine the way of drawing\n                        the arc. either CHORD, PIE, or OPEN.","name":"mode"},{"type":{"names":["Integer"]},"optional":true,"description":"optional parameter for WebGL mode only. This is to\n                        specify the number of vertices that makes up the\n                        perimeter of the arc. Default value is 25. Won't\n                        draw a stroke for a detail of more than 50.","name":"detail"}],"examples":["<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  arc(50, 50, 80, 80, 0, PI + HALF_PI);\n\n  describe('A white circle on a gray canvas. The top-right quarter of the circle is missing.');\n}\n</code>\n</div>","<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  arc(50, 50, 80, 40, 0, PI + HALF_PI);\n\n  describe('A white ellipse on a gray canvas. The top-right quarter of the ellipse is missing.');\n}\n</code>\n</div>","<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Bottom-right.\n  arc(50, 55, 50, 50, 0, HALF_PI);\n\n  noFill();\n\n  // Bottom-left.\n  arc(50, 55, 60, 60, HALF_PI, PI);\n\n  // Top-left.\n  arc(50, 55, 70, 70, PI, PI + QUARTER_PI);\n\n  // Top-right.\n  arc(50, 55, 80, 80, PI + QUARTER_PI, TWO_PI);\n\n  describe(\n    'A shattered outline of an circle with a quarter of a white circle at the bottom-right.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Default fill mode.\n  arc(50, 50, 80, 80, 0, PI + QUARTER_PI);\n\n  describe('A white circle with the top-right third missing. The bottom is outlined in black.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // OPEN fill mode.\n  arc(50, 50, 80, 80, 0, PI + QUARTER_PI, OPEN);\n\n  describe(\n    'A white circle missing a section from the top-right. The bottom is outlined in black.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // CHORD fill mode.\n  arc(50, 50, 80, 80, 0, PI + QUARTER_PI, CHORD);\n\n  describe('A white circle with a black outline missing a section from the top-right.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // PIE fill mode.\n  arc(50, 50, 80, 80, 0, PI + QUARTER_PI, PIE);\n\n  describe('A white circle with a black outline. The top-right third is missing.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  background(200);\n\n  // PIE fill mode.\n  arc(0, 0, 80, 80, 0, PI + QUARTER_PI, PIE);\n\n  describe('A white circle with a black outline. The top-right third is missing.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  background(200);\n\n  // PIE fill mode with 5 vertices.\n  arc(0, 0, 80, 80, 0, PI + QUARTER_PI, PIE, 5);\n\n  describe('A white circle with a black outline. The top-right third is missing.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  describe('A yellow circle on a black background. The circle opens and closes its mouth.');\n}\n\nfunction draw() {\n  background(0);\n\n  // Style the arc.\n  noStroke();\n  fill(255, 255, 0);\n\n  // Update start and stop angles.\n  let biteSize = PI / 16;\n  let startAngle = biteSize * sin(frameCount * 0.1) + biteSize;\n  let endAngle = TWO_PI - startAngle;\n\n  // Draw the arc.\n  arc(50, 50, 80, 80, startAngle, endAngle, PIE);\n}\n</code>\n</div>"],"chainable":true,"meta":{"lineno":102,"filename":"2d_primitives.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":2},{"id":"module:Shape~ellipse","longname":"module:Shape~ellipse","name":"ellipse","kind":"function","scope":"inner","description":"Draws an ellipse (oval).\n\nAn ellipse is a round shape defined by the `x`, `y`, `w`, and\n`h` parameters. `x` and `y` set the location of its center. `w` and\n`h` set its width and height. See\n<a href=\"#/p5/ellipseMode\">ellipseMode()</a> for other ways to set\nits position.\n\nIf no height is set, the value of width is used for both the width and\nheight. If a negative height or width is specified, the absolute value is\ntaken.\n\nThe fifth parameter, `detail`, is also optional. It determines how many\nvertices are used to draw the ellipse in WebGL mode. The default value is\n25.","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"description":"x-coordinate of the center of the ellipse.","name":"x"},{"type":{"names":["Number"]},"description":"y-coordinate of the center of the ellipse.","name":"y"},{"type":{"names":["Number"]},"description":"width of the ellipse.","name":"w"},{"type":{"names":["Number"]},"optional":true,"description":"height of the ellipse.","name":"h"}],"examples":["<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  ellipse(50, 50, 80, 80);\n\n  describe('A white circle on a gray canvas.');\n}\n</code>\n</div>","<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  ellipse(50, 50, 80);\n\n  describe('A white circle on a gray canvas.');\n}\n</code>\n</div>","<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  ellipse(50, 50, 80, 40);\n\n  describe('A white ellipse on a gray canvas.');\n}\n</code>\n</div>","<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  background(200);\n\n  ellipse(0, 0, 80, 40);\n\n  describe('A white ellipse on a gray canvas.');\n}\n</code>\n</div>","<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  background(200);\n\n  // Use 6 vertices.\n  ellipse(0, 0, 80, 40, 6);\n\n  describe('A white hexagon on a gray canvas.');\n}\n</code>\n</div>"],"chainable":true,"meta":{"lineno":373,"filename":"2d_primitives.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":3},{"id":"module:Shape~ellipse","longname":"module:Shape~ellipse","name":"ellipse","kind":"function","scope":"inner","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"name":"x"},{"type":{"names":["Number"]},"name":"y"},{"type":{"names":["Number"]},"name":"w"},{"type":{"names":["Number"]},"name":"h"},{"type":{"names":["Integer"]},"optional":true,"description":"optional parameter for WebGL mode only. This is to\n                        specify the number of vertices that makes up the\n                        perimeter of the ellipse. Default value is 25. Won't\n                        draw a stroke for a detail of more than 50.","name":"detail"}],"meta":{"lineno":474,"filename":"2d_primitives.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":4},{"id":"module:Shape~circle","longname":"module:Shape~circle","name":"circle","kind":"function","scope":"inner","description":"Draws a circle.\n\nA circle is a round shape defined by the `x`, `y`, and `d`\nparameters. `x` and `y` set the location of its center. `d` sets its\nwidth and height (diameter). Every point on the circle's edge is the\nsame distance, `d`, from its center. See\n<a href=\"#/p5/ellipseMode\">ellipseMode()</a> for other ways to set\nits position.","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"description":"x-coordinate of the center of the circle.","name":"x"},{"type":{"names":["Number"]},"description":"y-coordinate of the center of the circle.","name":"y"},{"type":{"names":["Number"]},"description":"diameter of the circle.","name":"d"}],"examples":["<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  circle(50, 50, 25);\n\n  describe('A white circle with black outline in the middle of a gray canvas.');\n}\n</code>\n</div>","<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  background(200);\n\n  circle(0, 0, 25);\n\n  describe('A white circle with black outline in the middle of a gray canvas.');\n}\n</code>\n</div>"],"chainable":true,"meta":{"lineno":490,"filename":"2d_primitives.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":5},{"id":"module:Shape~line","longname":"module:Shape~line","name":"line","kind":"function","scope":"inner","description":"Draws a straight line between two points.\n\nA line's default width is one pixel. The version of `line()` with four\nparameters draws the line in 2D. To color a line, use the\n<a href=\"#/p5/stroke\">stroke()</a> function. To change its width, use the\n<a href=\"#/p5/strokeWeight\">strokeWeight()</a> function. A line\ncan't be filled, so the <a href=\"#/p5/fill\">fill()</a> function won't\naffect the line's color.\n\nThe version of `line()` with six parameters allows the line to be drawn in\n3D space. Doing so requires adding the `WEBGL` argument to\n<a href=\"#/p5/createCanvas\">createCanvas()</a>.","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"description":"the x-coordinate of the first point.","name":"x1"},{"type":{"names":["Number"]},"description":"the y-coordinate of the first point.","name":"y1"},{"type":{"names":["Number"]},"description":"the x-coordinate of the second point.","name":"x2"},{"type":{"names":["Number"]},"description":"the y-coordinate of the second point.","name":"y2"}],"examples":["<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  line(30, 20, 85, 75);\n\n  describe(\n    'A black line on a gray canvas running from top-center to bottom-right.'\n  );\n}\n</code>\n</div>","<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Style the line.\n  stroke('magenta');\n  strokeWeight(5);\n\n  line(30, 20, 85, 75);\n\n  describe(\n    'A thick, magenta line on a gray canvas running from top-center to bottom-right.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Top.\n  line(30, 20, 85, 20);\n\n  // Right.\n  stroke(126);\n  line(85, 20, 85, 75);\n\n  // Bottom.\n  stroke(255);\n  line(85, 75, 30, 75);\n\n  describe(\n    'Three lines drawn in grayscale on a gray canvas. They form the top, right, and bottom sides of a square.'\n  );\n}\n</code>\n</div>","<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  background(200);\n\n  line(-20, -30, 35, 25);\n\n  describe(\n    'A black line on a gray canvas running from top-center to bottom-right.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe('A black line connecting two spheres. The scene spins slowly.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Rotate around the y-axis.\n  rotateY(frameCount * 0.01);\n\n  // Draw a line.\n  line(0, 0, 0, 30, 20, -10);\n\n  // Draw the center sphere.\n  sphere(10);\n\n  // Translate to the second point.\n  translate(30, 20, -10);\n\n  // Draw the bottom-right sphere.\n  sphere(10);\n}\n</code>\n</div>"],"chainable":true,"meta":{"lineno":574,"filename":"2d_primitives.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":6},{"id":"module:Shape~line","longname":"module:Shape~line","name":"line","kind":"function","scope":"inner","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"name":"x1"},{"type":{"names":["Number"]},"name":"y1"},{"type":{"names":["Number"]},"description":"the z-coordinate of the first point.","name":"z1"},{"type":{"names":["Number"]},"name":"x2"},{"type":{"names":["Number"]},"name":"y2"},{"type":{"names":["Number"]},"description":"the z-coordinate of the second point.","name":"z2"}],"chainable":true,"meta":{"lineno":706,"filename":"2d_primitives.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":7},{"id":"module:Shape~point","longname":"module:Shape~point","name":"point","kind":"function","scope":"inner","description":"Draws a single point in space.\n\nA point's default width is one pixel. To color a point, use the\n<a href=\"#/p5/stroke\">stroke()</a> function. To change its width, use the\n<a href=\"#/p5/strokeWeight\">strokeWeight()</a> function. A point\ncan't be filled, so the <a href=\"#/p5/fill\">fill()</a> function won't\naffect the point's color.\n\nThe version of `point()` with two parameters allows the point's location to\nbe set with its x- and y-coordinates, as in `point(10, 20)`.\n\nThe version of `point()` with three parameters allows the point to be drawn\nin 3D space with x-, y-, and z-coordinates, as in `point(10, 20, 30)`.\nDoing so requires adding the `WEBGL` argument to\n<a href=\"#/p5/createCanvas\">createCanvas()</a>.\n\nThe version of `point()` with one parameter allows the point's location to\nbe set with a <a href=\"#/p5/p5.Vector\">p5.Vector</a> object.","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"description":"the x-coordinate.","name":"x"},{"type":{"names":["Number"]},"description":"the y-coordinate.","name":"y"},{"type":{"names":["Number"]},"optional":true,"description":"the z-coordinate (for WebGL mode).","name":"z"}],"examples":["<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Top-left.\n  point(30, 20);\n\n  // Top-right.\n  point(85, 20);\n\n  // Bottom-right.\n  point(85, 75);\n\n  // Bottom-left.\n  point(30, 75);\n\n  describe(\n    'Four small, black points drawn on a gray canvas. The points form the corners of a square.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Top-left.\n  point(30, 20);\n\n  // Top-right.\n  point(70, 20);\n\n  // Style the next points.\n  stroke('purple');\n  strokeWeight(10);\n\n  // Bottom-right.\n  point(70, 80);\n\n  // Bottom-left.\n  point(30, 80);\n\n  describe(\n    'Four points drawn on a gray canvas. Two are black and two are purple. The points form the corners of a square.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Top-left.\n  let a = createVector(30, 20);\n  point(a);\n\n  // Top-right.\n  let b = createVector(70, 20);\n  point(b);\n\n  // Bottom-right.\n  let c = createVector(70, 80);\n  point(c);\n\n  // Bottom-left.\n  let d = createVector(30, 80);\n  point(d);\n\n  describe(\n    'Four small, black points drawn on a gray canvas. The points form the corners of a square.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe('Two purple points drawn on a gray canvas.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Style the points.\n  stroke('purple');\n  strokeWeight(10);\n\n  // Top-left.\n  point(-20, -30);\n\n  // Bottom-right.\n  point(20, 30);\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe('Two purple points drawn on a gray canvas. The scene spins slowly.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Rotate around the y-axis.\n  rotateY(frameCount * 0.01);\n\n  // Style the points.\n  stroke('purple');\n  strokeWeight(10);\n\n  // Top-left.\n  point(-20, -30, 0);\n\n  // Bottom-right.\n  point(20, 30, -50);\n}\n</code>\n</div>"],"chainable":true,"meta":{"lineno":731,"filename":"2d_primitives.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":8},{"id":"module:Shape~point","longname":"module:Shape~point","name":"point","kind":"function","scope":"inner","memberof":"module:Shape","params":[{"type":{"names":["p5.Vector"]},"description":"the coordinate vector.","name":"coordinateVector"}],"chainable":true,"meta":{"lineno":895,"filename":"2d_primitives.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":9},{"id":"module:Shape~quad","longname":"module:Shape~quad","name":"quad","kind":"function","scope":"inner","description":"Draws a quadrilateral (four-sided shape).\n\nQuadrilaterals include rectangles, squares, rhombuses, and trapezoids. The\nfirst pair of parameters `(x1, y1)` sets the quad's first point. The next\nthree pairs of parameters set the coordinates for its next three points\n`(x2, y2)`, `(x3, y3)`, and `(x4, y4)`. Points should be added in either\nclockwise or counter-clockwise order.\n\nThe version of `quad()` with twelve parameters allows the quad to be drawn\nin 3D space. Doing so requires adding the `WEBGL` argument to\n<a href=\"#/p5/createCanvas\">createCanvas()</a>.\n\nThe thirteenth and fourteenth parameters are optional. In WebGL mode, they\nset the number of segments used to draw the quadrilateral in the x- and\ny-directions. They're both 25 by default.","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"description":"the x-coordinate of the first point.","name":"x1"},{"type":{"names":["Number"]},"description":"the y-coordinate of the first point.","name":"y1"},{"type":{"names":["Number"]},"description":"the x-coordinate of the second point.","name":"x2"},{"type":{"names":["Number"]},"description":"the y-coordinate of the second point.","name":"y2"},{"type":{"names":["Number"]},"description":"the x-coordinate of the third point.","name":"x3"},{"type":{"names":["Number"]},"description":"the y-coordinate of the third point.","name":"y3"},{"type":{"names":["Number"]},"description":"the x-coordinate of the fourth point.","name":"x4"},{"type":{"names":["Number"]},"description":"the y-coordinate of the fourth point.","name":"y4"},{"type":{"names":["Integer"]},"optional":true,"description":"number of segments in the x-direction.","name":"detailX"},{"type":{"names":["Integer"]},"optional":true,"description":"number of segments in the y-direction.","name":"detailY"}],"examples":["<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  quad(20, 20, 80, 20, 80, 80, 20, 80);\n\n  describe('A white square with a black outline drawn on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  quad(20, 30, 80, 30, 80, 70, 20, 70);\n\n  describe('A white rectangle with a black outline drawn on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  quad(50, 62, 86, 50, 50, 38, 14, 50);\n\n  describe('A white rhombus with a black outline drawn on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  quad(20, 50, 80, 30, 80, 70, 20, 70);\n\n  describe('A white trapezoid with a black outline drawn on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  background(200);\n\n  quad(-30, -30, 30, -30, 30, 30, -30, 30);\n\n  describe('A white square with a black outline drawn on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe('A wavy white surface spins around on gray canvas.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Rotate around the y-axis.\n  rotateY(frameCount * 0.01);\n\n  // Draw the quad.\n  quad(-30, -30, 0, 30, -30, 0, 30, 30, 20, -30, 30, -20);\n}\n</code>\n</div>"],"chainable":true,"meta":{"lineno":923,"filename":"2d_primitives.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":10},{"id":"module:Shape~quad","longname":"module:Shape~quad","name":"quad","kind":"function","scope":"inner","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"name":"x1"},{"type":{"names":["Number"]},"name":"y1"},{"type":{"names":["Number"]},"description":"the z-coordinate of the first point.","name":"z1"},{"type":{"names":["Number"]},"name":"x2"},{"type":{"names":["Number"]},"name":"y2"},{"type":{"names":["Number"]},"description":"the z-coordinate of the second point.","name":"z2"},{"type":{"names":["Number"]},"name":"x3"},{"type":{"names":["Number"]},"name":"y3"},{"type":{"names":["Number"]},"description":"the z-coordinate of the third point.","name":"z3"},{"type":{"names":["Number"]},"name":"x4"},{"type":{"names":["Number"]},"name":"y4"},{"type":{"names":["Number"]},"description":"the z-coordinate of the fourth point.","name":"z4"},{"type":{"names":["Integer"]},"optional":true,"name":"detailX"},{"type":{"names":["Integer"]},"optional":true,"name":"detailY"}],"chainable":true,"meta":{"lineno":1043,"filename":"2d_primitives.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":11},{"id":"module:Shape~rect","longname":"module:Shape~rect","name":"rect","kind":"function","scope":"inner","description":"Draws a rectangle.\n\nA rectangle is a four-sided shape defined by the `x`, `y`, `w`, and `h`\nparameters. `x` and `y` set the location of its top-left corner. `w` sets\nits width and `h` sets its height. Every angle in the rectangle measures\n90˚. See <a href=\"#/p5/rectMode\">rectMode()</a> for other ways to define\nrectangles.\n\nThe version of `rect()` with five parameters creates a rounded rectangle. The\nfifth parameter sets the radius for all four corners.\n\nThe version of `rect()` with eight parameters also creates a rounded\nrectangle. Each of the last four parameters set the radius of a corner. The\nradii start with the top-left corner and move clockwise around the\nrectangle. If any of these parameters are omitted, they are set to the\nvalue of the last radius that was set.","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"description":"x-coordinate of the rectangle.","name":"x"},{"type":{"names":["Number"]},"description":"y-coordinate of the rectangle.","name":"y"},{"type":{"names":["Number"]},"description":"width of the rectangle.","name":"w"},{"type":{"names":["Number"]},"optional":true,"description":"height of the rectangle.","name":"h"},{"type":{"names":["Number"]},"optional":true,"description":"optional radius of top-left corner.","name":"tl"},{"type":{"names":["Number"]},"optional":true,"description":"optional radius of top-right corner.","name":"tr"},{"type":{"names":["Number"]},"optional":true,"description":"optional radius of bottom-right corner.","name":"br"},{"type":{"names":["Number"]},"optional":true,"description":"optional radius of bottom-left corner.","name":"bl"}],"examples":["<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  rect(30, 20, 55, 55);\n\n  describe('A white square with a black outline on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  rect(30, 20, 55, 40);\n\n  describe('A white rectangle with a black outline on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Give all corners a radius of 20.\n  rect(30, 20, 55, 50, 20);\n\n  describe('A white rectangle with a black outline and round edges on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Give each corner a unique radius.\n  rect(30, 20, 55, 50, 20, 15, 10, 5);\n\n  describe('A white rectangle with a black outline and round edges of different radii.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  background(200);\n\n  rect(-20, -30, 55, 55);\n\n  describe('A white square with a black outline on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe('A white square spins around on gray canvas.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Rotate around the y-axis.\n  rotateY(frameCount * 0.01);\n\n  // Draw the rectangle.\n  rect(-20, -30, 55, 55);\n}\n</code>\n</div>"],"chainable":true,"meta":{"lineno":1086,"filename":"2d_primitives.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":12},{"id":"module:Shape~rect","longname":"module:Shape~rect","name":"rect","kind":"function","scope":"inner","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"name":"x"},{"type":{"names":["Number"]},"name":"y"},{"type":{"names":["Number"]},"name":"w"},{"type":{"names":["Number"]},"name":"h"},{"type":{"names":["Integer"]},"optional":true,"description":"number of segments in the x-direction (for WebGL mode).","name":"detailX"},{"type":{"names":["Integer"]},"optional":true,"description":"number of segments in the y-direction (for WebGL mode).","name":"detailY"}],"chainable":true,"meta":{"lineno":1209,"filename":"2d_primitives.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":13},{"id":"module:Shape~square","longname":"module:Shape~square","name":"square","kind":"function","scope":"inner","description":"Draws a square.\n\nA square is a four-sided shape defined by the `x`, `y`, and `s`\nparameters. `x` and `y` set the location of its top-left corner. `s` sets\nits width and height. Every angle in the square measures 90˚ and all its\nsides are the same length. See <a href=\"#/p5/rectMode\">rectMode()</a> for\nother ways to define squares.\n\nThe version of `square()` with four parameters creates a rounded square.\nThe fourth parameter sets the radius for all four corners.\n\nThe version of `square()` with seven parameters also creates a rounded\nsquare. Each of the last four parameters set the radius of a corner. The\nradii start with the top-left corner and move clockwise around the\nsquare. If any of these parameters are omitted, they are set to the\nvalue of the last radius that was set.","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"description":"x-coordinate of the square.","name":"x"},{"type":{"names":["Number"]},"description":"y-coordinate of the square.","name":"y"},{"type":{"names":["Number"]},"description":"side size of the square.","name":"s"},{"type":{"names":["Number"]},"optional":true,"description":"optional radius of top-left corner.","name":"tl"},{"type":{"names":["Number"]},"optional":true,"description":"optional radius of top-right corner.","name":"tr"},{"type":{"names":["Number"]},"optional":true,"description":"optional radius of bottom-right corner.","name":"br"},{"type":{"names":["Number"]},"optional":true,"description":"optional radius of bottom-left corner.","name":"bl"}],"examples":["<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  square(30, 20, 55);\n\n  describe('A white square with a black outline in on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Give all corners a radius of 20.\n  square(30, 20, 55, 20);\n\n  describe(\n    'A white square with a black outline and round edges on a gray canvas.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Give each corner a unique radius.\n  square(30, 20, 55, 20, 15, 10, 5);\n\n  describe('A white square with a black outline and round edges of different radii.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  background(200);\n\n  square(-20, -30, 55);\n\n  describe('A white square with a black outline in on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe('A white square spins around on gray canvas.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Rotate around the y-axis.\n  rotateY(frameCount * 0.01);\n\n  // Draw the square.\n  square(-20, -30, 55);\n}\n</code>\n</div>"],"chainable":true,"meta":{"lineno":1224,"filename":"2d_primitives.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":14},{"id":"module:Shape~triangle","longname":"module:Shape~triangle","name":"triangle","kind":"function","scope":"inner","description":"Draws a triangle.\n\nA triangle is a three-sided shape defined by three points. The\nfirst two parameters specify the triangle's first point `(x1, y1)`. The\nmiddle two parameters specify its second point `(x2, y2)`. And the last two\nparameters specify its third point `(x3, y3)`.","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"description":"x-coordinate of the first point.","name":"x1"},{"type":{"names":["Number"]},"description":"y-coordinate of the first point.","name":"y1"},{"type":{"names":["Number"]},"description":"x-coordinate of the second point.","name":"x2"},{"type":{"names":["Number"]},"description":"y-coordinate of the second point.","name":"y2"},{"type":{"names":["Number"]},"description":"x-coordinate of the third point.","name":"x3"},{"type":{"names":["Number"]},"description":"y-coordinate of the third point.","name":"y3"}],"examples":["<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  triangle(30, 75, 58, 20, 86, 75);\n\n  describe('A white triangle with a black outline on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  background(200);\n\n  triangle(-20, 25, 8, -30, 36, 25);\n\n  describe('A white triangle with a black outline on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe('A white triangle spins around on a gray canvas.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Rotate around the y-axis.\n  rotateY(frameCount * 0.01);\n\n  // Draw the triangle.\n  triangle(-20, 25, 8, -30, 36, 25);\n}\n</code>\n</div>"],"chainable":true,"meta":{"lineno":1371,"filename":"2d_primitives.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":15},{"id":"module:Events","longname":"module:Events","name":"Events","kind":"module","requires":["module:core"],"customTags":[{"tag":"submodule","value":"Keyboard"},{"tag":"for","value":"p5"}],"meta":{"lineno":1,"filename":"keyboard.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":0},{"id":"module:Events~p5#isKeyPressed","longname":"module:Events~p5#isKeyPressed","name":"isKeyPressed","kind":"member","scope":"instance","description":"A `Boolean` system variable that's `true` if any key is currently pressed\nand `false` if not.","memberof":"module:Events~p5","examples":["<div>\n<code>\n// Click on the canvas to begin detecting key presses.\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  describe(\n    'A gray square with a white square at its center. The white square turns black when the user presses a key.'\n  );\n}\n\nfunction draw() {\n  background(200);\n\n  // Style the square.\n  if (keyIsPressed === true) {\n    fill(0);\n  } else {\n    fill(255);\n  }\n\n  // Draw the square.\n  square(25, 25, 50);\n}\n</code>\n</div>\n\n<div>\n<code>\n// Click on the canvas to begin detecting key presses.\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  describe(\n    'A gray square with a white square at its center. The white square turns black when the user presses a key.'\n  );\n}\n\nfunction draw() {\n  background(200);\n\n  // Style the square.\n  if (keyIsPressed) {\n    fill(0);\n  } else {\n    fill(255);\n  }\n\n  // Draw the square.\n  square(25, 25, 50);\n}\n</code>\n</div>\n\n<div>\n<code>\n// Click on the canvas to begin detecting key presses.\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  describe(\n    'A gray square with the word \"false\" at its center. The word switches to \"true\" when the user presses a key.'\n  );\n}\n\nfunction draw() {\n  background(200);\n\n  // Style the text.\n  textAlign(CENTER);\n  textSize(16);\n\n  // Display the value of keyIsPressed.\n  text(keyIsPressed, 50, 50);\n}\n</code>\n</div>"],"readonly":true,"properties":[{"type":{"names":["Boolean"]},"name":"keyIsPressed"}],"meta":{"lineno":99,"filename":"keyboard.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":1},{"id":"module:Events~p5#key","longname":"module:Events~p5#key","name":"key","kind":"member","scope":"instance","description":"A `String` system variable that contains the value of the last key typed.\n\nThe key variable is helpful for checking whether an\n<a href=\"https://en.wikipedia.org/wiki/ASCII#Printable_characters\" target=\"_blank\">ASCII</a>\nkey has been typed. For example, the expression `key === \"a\"` evaluates to\n`true` if the `a` key was typed and `false` if not. `key` doesn’t update\nfor special keys such as `LEFT_ARROW` and `ENTER`. Use keyCode instead for\nspecial keys. The <a href=\"#/p5/keyIsDown\">keyIsDown()</a> function should\nbe used to check for multiple different key presses at the same time.","memberof":"module:Events~p5","examples":["<div>\n<code>\n// Click on the canvas to begin detecting key presses.\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  describe(\n    'A gray square. The last key pressed is displayed at the center.'\n  );\n}\n\nfunction draw() {\n  background(200);\n\n  // Style the text.\n  textAlign(CENTER);\n  textSize(16);\n\n  // Display the last key pressed.\n  text(key, 50, 50);\n}\n</code>\n</div>\n\n<div>\n<code>\n// Click on the canvas to begin detecting key presses.\n\nlet x = 50;\nlet y = 50;\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  describe(\n    'A gray square with a black circle at its center. The circle moves when the user presses the keys \"w\", \"a\", \"s\", or \"d\". It leaves a trail as it moves.'\n  );\n}\n\nfunction draw() {\n  // Update x and y if a key is pressed.\n  if (keyIsPressed === true) {\n    if (key === 'w') {\n      y -= 1;\n    } else if (key === 's') {\n      y += 1;\n    } else if (key === 'a') {\n      x -= 1;\n    } else if (key === 'd') {\n      x += 1;\n    }\n  }\n\n  // Style the circle.\n  fill(0);\n\n  // Draw the circle at (x, y).\n  circle(x, y, 5);\n}\n</code>\n</div>"],"readonly":true,"properties":[{"type":{"names":["String"]},"name":"key"}],"meta":{"lineno":182,"filename":"keyboard.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":2},{"id":"module:Events~p5#keyCode","longname":"module:Events~p5#keyCode","name":"keyCode","kind":"member","scope":"instance","description":"A `Number` system variable that contains the code of the last key typed.\n\nAll keys have a `keyCode`. For example, the `a` key has the `keyCode` 65.\nThe `keyCode` variable is helpful for checking whether a special key has\nbeen typed. For example, the following conditional checks whether the enter\nkey has been typed:\n\n```js\nif (keyCode === 13) {\n  // Code to run if the enter key was pressed.\n}\n```\n\nThe same code can be written more clearly using the system variable `ENTER`\nwhich has a value of 13:\n\n```js\nif (keyCode === ENTER) {\n  // Code to run if the enter key was pressed.\n}\n```\n\nThe system variables `BACKSPACE`, `DELETE`, `ENTER`, `RETURN`, `TAB`,\n`ESCAPE`, `SHIFT`, `CONTROL`, `OPTION`, `ALT`, `UP_ARROW`, `DOWN_ARROW`,\n`LEFT_ARROW`, and `RIGHT_ARROW` are all helpful shorthands the key codes of\nspecial keys. Key codes can be found on websites such as\n<a href=\"http://keycode.info/\">keycode.info</a>.","memberof":"module:Events~p5","examples":["<div>\n<code>\n// Click on the canvas to begin detecting key presses.\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  describe(\n    'A gray square. The last key pressed and its code are displayed at the center.'\n  );\n}\n\nfunction draw() {\n  background(200);\n\n  // Style the text.\n  textAlign(CENTER);\n  textSize(16);\n\n  // Display the last key pressed and its code.\n  text(`${key} : ${keyCode}`, 50, 50);\n}\n</code>\n</div>\n\n<div>\n<code>\n// Click on the canvas to begin detecting key presses.\n\nlet x = 50;\nlet y = 50;\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  describe(\n    'A gray square with a black circle at its center. The circle moves when the user presses an arrow key. It leaves a trail as it moves.'\n  );\n}\n\nfunction draw() {\n  // Update x and y if an arrow key is pressed.\n  if (keyIsPressed === true) {\n    if (keyCode === UP_ARROW) {\n      y -= 1;\n    } else if (keyCode === DOWN_ARROW) {\n      y += 1;\n    } else if (keyCode === LEFT_ARROW) {\n      x -= 1;\n    } else if (keyCode === RIGHT_ARROW) {\n      x += 1;\n    }\n  }\n\n  // Style the circle.\n  fill(0);\n\n  // Draw the circle at (x, y).\n  circle(x, y, 5);\n}\n</code>\n</div>"],"readonly":true,"properties":[{"type":{"names":["Integer"]},"name":"keyCode"}],"meta":{"lineno":282,"filename":"keyboard.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":3},{"id":"module:Events~p5#_onblur","longname":"module:Events~p5#_onblur","name":"_onblur","kind":"function","scope":"instance","description":"The onblur function is called when the user is no longer focused\non the p5 element. Because the keyup events will not fire if the user is\nnot focused on the element we must assume all keys currently down have\nbeen released.","memberof":"module:Events~p5","meta":{"lineno":791,"filename":"keyboard.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":7},{"id":"module:Events~p5#_areDownKeys","longname":"module:Events~p5#_areDownKeys","name":"_areDownKeys","kind":"function","scope":"instance","description":"The _areDownKeys function returns a boolean true if any keys pressed\nand a false if no keys are currently pressed.\nHelps avoid instances where multiple keys are pressed simultaneously and\nreleasing a single key will then switch the\nkeyIsPressed property to true.","memberof":"module:Events~p5","access":"private","meta":{"lineno":920,"filename":"keyboard.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":9},{"id":"module:Events~keyPressed","longname":"module:Events~keyPressed","name":"keyPressed","kind":"function","scope":"inner","description":"A function that's called once when any key is pressed.\n\nDeclaring the function `keyPressed()` sets a code block to run once\nautomatically when the user presses any key:\n\n```js\nfunction keyPressed() {\n  // Code to run.\n}\n```\n\nThe <a href=\"#/p5/key\">key</a> and <a href=\"#/p5/keyCode\">keyCode</a>\nvariables will be updated with the most recently typed value when\n`keyPressed()` is called by p5.js:\n\n```js\nfunction keyPressed() {\n  if (key === 'c') {\n    // Code to run.\n  }\n\n  if (keyCode === ENTER) {\n    // Code to run.\n  }\n}\n```\n\nThe parameter, `event`, is optional. `keyPressed()` is always passed a\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent\" target=\"_blank\">KeyboardEvent</a>\nobject with properties that describe the key press event:\n\n```js\nfunction keyPressed(event) {\n  // Code to run that uses the event.\n  console.log(event);\n}\n```\n\nBrowsers may have default behaviors attached to various key events. For\nexample, some browsers may jump to the bottom of a web page when the\n`SPACE` key is pressed. To prevent any default behavior for this event, add\n`return false;` to the end of the function.","memberof":"module:Events","params":[{"type":{"names":["KeyboardEvent"]},"optional":true,"description":"optional `KeyboardEvent` callback argument.","name":"event"}],"examples":["<div>\n<code>\n// Click on the canvas to begin detecting key presses.\n\nlet value = 0;\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  describe(\n    'A gray square with a black square at its center. The inner square changes color when the user presses a key.'\n  );\n}\n\nfunction draw() {\n  background(200);\n\n  // Style the square.\n  fill(value);\n\n  // Draw the square.\n  square(25, 25, 50);\n}\n\n// Toggle the background color when the user presses a key.\nfunction keyPressed() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n  // Uncomment to prevent any default behavior.\n  // return false;\n}\n</code>\n</div>\n\n<div>\n<code>\n// Click on the canvas to begin detecting key presses.\n\nlet value = 0;\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  describe(\n    'A gray square with a white square at its center. The inner square turns black when the user presses the \"b\" key. It turns white when the user presses the \"a\" key.'\n  );\n}\n\nfunction draw() {\n  background(200);\n\n  // Style the square.\n  fill(value);\n\n  // Draw the square.\n  square(25, 25, 50);\n}\n\n// Reassign value when the user presses the 'a' or 'b' key.\nfunction keyPressed() {\n  if (key === 'a') {\n    value = 255;\n  } else if (key === 'b') {\n    value = 0;\n  }\n  // Uncomment to prevent any default behavior.\n  // return false;\n}\n</code>\n</div>\n\n<div>\n<code>\n// Click on the canvas to begin detecting key presses.\n\nlet value = 0;\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  describe(\n    'A gray square with a black square at its center. The inner square turns white when the user presses the left arrow key. It turns black when the user presses the right arrow key.'\n  );\n}\n\nfunction draw() {\n  background(200);\n\n  // Style the square.\n  fill(value);\n\n  // Draw the square.\n  square(25, 25, 50);\n}\n\n// Toggle the background color when the user presses an arrow key.\nfunction keyPressed() {\n  if (keyCode === LEFT_ARROW) {\n    value = 255;\n  } else if (keyCode === RIGHT_ARROW) {\n    value = 0;\n  }\n  // Uncomment to prevent any default behavior.\n  // return false;\n}\n</code>\n</div>"],"meta":{"lineno":284,"filename":"keyboard.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":4},{"id":"module:Events~keyReleased","longname":"module:Events~keyReleased","name":"keyReleased","kind":"function","scope":"inner","description":"A function that's called once when any key is released.\n\nDeclaring the function `keyReleased()` sets a code block to run once\nautomatically when the user releases any key:\n\n```js\nfunction keyReleased() {\n  // Code to run.\n}\n```\n\nThe <a href=\"#/p5/key\">key</a> and <a href=\"#/p5/keyCode\">keyCode</a>\nvariables will be updated with the most recently released value when\n`keyReleased()` is called by p5.js:\n\n```js\nfunction keyReleased() {\n  if (key === 'c') {\n    // Code to run.\n  }\n\n  if (keyCode === ENTER) {\n    // Code to run.\n  }\n}\n```\n\nThe parameter, `event`, is optional. `keyReleased()` is always passed a\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent\" target=\"_blank\">KeyboardEvent</a>\nobject with properties that describe the key press event:\n\n```js\nfunction keyReleased(event) {\n  // Code to run that uses the event.\n  console.log(event);\n}\n```\n\nBrowsers may have default behaviors attached to various key events. To\nprevent any default behavior for this event, add `return false;` to the end\nof the function.","memberof":"module:Events","params":[{"type":{"names":["KeyboardEvent"]},"optional":true,"description":"optional `KeyboardEvent` callback argument.","name":"event"}],"examples":["<div>\n<code>\n// Click on the canvas to begin detecting key presses.\n\nlet value = 0;\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  describe(\n    'A gray square with a black square at its center. The inner square changes color when the user releases a key.'\n  );\n}\n\nfunction draw() {\n  background(200);\n\n  // Style the square.\n  fill(value);\n\n  // Draw the square.\n  square(25, 25, 50);\n}\n\n// Toggle value when the user releases a key.\nfunction keyReleased() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n  // Uncomment to prevent any default behavior.\n  // return false;\n}\n</code>\n</div>\n\n<div>\n<code>\n// Click on the canvas to begin detecting key presses.\n\nlet value = 0;\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  describe(\n    'A gray square with a black square at its center. The inner square becomes white when the user releases the \"w\" key.'\n  );\n}\n\nfunction draw() {\n  background(200);\n\n  // Style the square.\n  fill(value);\n\n  // Draw the square.\n  square(25, 25, 50);\n}\n\n// Set value to 255 the user releases the 'w' key.\nfunction keyReleased() {\n  if (key === 'w') {\n    value = 255;\n  }\n  // Uncomment to prevent any default behavior.\n  // return false;\n}\n</code>\n</div>\n\n<div>\n<code>\n// Click on the canvas to begin detecting key presses.\n\nlet value = 0;\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  describe(\n    'A gray square with a black square at its center. The inner square turns white when the user presses and releases the left arrow key. It turns black when the user presses and releases the right arrow key.'\n  );\n}\n\nfunction draw() {\n  background(200);\n\n  // Style the square.\n  fill(value);\n\n  // Draw the square.\n  square(25, 25, 50);\n}\n\n// Toggle the background color when the user releases an arrow key.\nfunction keyReleased() {\n  if (keyCode === LEFT_ARROW) {\n    value = 255;\n  } else if (keyCode === RIGHT_ARROW) {\n    value = 0;\n  }\n  // Uncomment to prevent any default behavior.\n  // return false;\n}\n</code>\n</div>"],"meta":{"lineno":461,"filename":"keyboard.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":5},{"id":"module:Events~keyTyped","longname":"module:Events~keyTyped","name":"keyTyped","kind":"function","scope":"inner","description":"A function that's called once when keys with printable characters are pressed.\n\nDeclaring the function `keyTyped()` sets a code block to run once\nautomatically when the user presses any key with a printable character such\nas `a` or 1. Modifier keys such as `SHIFT`, `CONTROL`, and the arrow keys\nwill be ignored:\n\n```js\nfunction keyTyped() {\n  // Code to run.\n}\n```\n\nThe <a href=\"#/p5/key\">key</a> and <a href=\"#/p5/keyCode\">keyCode</a>\nvariables will be updated with the most recently released value when\n`keyTyped()` is called by p5.js:\n\n```js\nfunction keyTyped() {\n  // Check for the \"c\" character using key.\n  if (key === 'c') {\n    // Code to run.\n  }\n\n  // Check for \"c\" using keyCode.\n  if (keyCode === 67) {\n    // Code to run.\n  }\n}\n```\n\nThe parameter, `event`, is optional. `keyTyped()` is always passed a\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent\" target=\"_blank\">KeyboardEvent</a>\nobject with properties that describe the key press event:\n\n```js\nfunction keyReleased(event) {\n  // Code to run that uses the event.\n  console.log(event);\n}\n```\n\nNote: Use the <a href=\"#/p5/keyPressed\">keyPressed()</a> function and\n<a href=\"#/p5/keyCode\">keyCode</a> system variable to respond to modifier\nkeys such as `ALT`.\n\nBrowsers may have default behaviors attached to various key events. To\nprevent any default behavior for this event, add `return false;` to the end\nof the function.","memberof":"module:Events","params":[{"type":{"names":["KeyboardEvent"]},"optional":true,"description":"optional `KeyboardEvent` callback argument.","name":"event"}],"examples":["<div>\n<code>\n// Click on the canvas to begin detecting key presses.\n// Note: Pressing special keys such as SPACE have no effect.\n\nlet value = 0;\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  describe(\n    'A gray square with a white square at its center. The inner square changes color when the user presses a key.'\n  );\n}\n\nfunction draw() {\n  background(200);\n\n  // Style the square.\n  fill(value);\n\n  // Draw the square.\n  square(25, 25, 50);\n}\n\n// Toggle the square's color when the user types a printable key.\nfunction keyTyped() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n  // Uncomment to prevent any default behavior.\n  // return false;\n}\n</code>\n</div>\n\n<div>\n<code>\n// Click on the canvas to begin detecting key presses.\n\nlet value = 0;\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  describe(\n    'A gray square with a white square at its center. The inner square turns black when the user types the \"b\" key. It turns white when the user types the \"a\" key.'\n  );\n}\n\nfunction draw() {\n  background(200);\n\n  // Style the square.\n  fill(value);\n\n  // Draw the square.\n  square(25, 25, 50);\n}\n\n// Reassign value when the user types the 'a' or 'b' key.\nfunction keyTyped() {\n  if (key === 'a') {\n    value = 255;\n  } else if (key === 'b') {\n    value = 0;\n  }\n  // Uncomment to prevent any default behavior.\n  // return false;\n}\n</code>\n</div>"],"meta":{"lineno":639,"filename":"keyboard.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":6},{"id":"module:Events~keyIsDown","longname":"module:Events~keyIsDown","name":"keyIsDown","kind":"function","scope":"inner","description":"Returns `true` if the key it’s checking is pressed and `false` if not.\n\n`keyIsDown()` is helpful when checking for multiple different key presses.\nFor example, `keyIsDown()` can be used to check if both `LEFT_ARROW` and\n`UP_ARROW` are pressed:\n\n```js\nif (keyIsDown(LEFT_ARROW) && keyIsDown(UP_ARROW)) {\n  // Move diagonally.\n}\n```\n\n`keyIsDown()` can check for key presses using\n<a href=\"#/p5/keyCode\">keyCode</a> values, as in `keyIsDown(37)` or\n`keyIsDown(LEFT_ARROW)`. Key codes can be found on websites such as\n<a href=\"https://keycode.info\" target=\"_blank\">keycode.info</a>.","memberof":"module:Events","params":[{"type":{"names":["Number"]},"description":"key to check.","name":"code"}],"examples":["<div>\n<code>\n// Click on the canvas to begin detecting key presses.\n\nlet x = 50;\nlet y = 50;\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  describe(\n    'A gray square with a black circle at its center. The circle moves when the user presses an arrow key. It leaves a trail as it moves.'\n  );\n}\n\nfunction draw() {\n  // Update x and y if an arrow key is pressed.\n  if (keyIsDown(LEFT_ARROW) === true) {\n    x -= 1;\n  }\n\n  if (keyIsDown(RIGHT_ARROW) === true) {\n    x += 1;\n  }\n\n  if (keyIsDown(UP_ARROW) === true) {\n    y -= 1;\n  }\n\n  if (keyIsDown(DOWN_ARROW) === true) {\n    y += 1;\n  }\n\n  // Style the circle.\n  fill(0);\n\n  // Draw the circle.\n  circle(x, y, 5);\n}\n</code>\n</div>\n\n<div>\n<code>\n// Click on the canvas to begin detecting key presses.\n\nlet x = 50;\nlet y = 50;\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  describe(\n    'A gray square with a black circle at its center. The circle moves when the user presses an arrow key. It leaves a trail as it moves.'\n  );\n}\n\nfunction draw() {\n  // Update x and y if an arrow key is pressed.\n  if (keyIsDown(37) === true) {\n    x -= 1;\n  }\n\n  if (keyIsDown(39) === true) {\n    x += 1;\n  }\n\n  if (keyIsDown(38) === true) {\n    y -= 1;\n  }\n\n  if (keyIsDown(40) === true) {\n    y += 1;\n  }\n\n  // Style the circle.\n  fill(0);\n\n  // Draw the circle.\n  circle(x, y, 5);\n}\n</code>\n</div>"],"returns":[{"type":{"names":["Boolean"]},"description":"whether the key is down or not."}],"meta":{"lineno":795,"filename":"keyboard.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":8},{"id":"module:Color","longname":"module:Color","name":"Color","kind":"module","requires":["module:core","module:constants","module:color_conversion"],"customTags":[{"tag":"submodule","value":"Creating & Reading"},{"tag":"for","value":"p5"}],"meta":{"lineno":1,"filename":"p5.Color.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":0},{"id":"module:Color~p5.Color()","longname":"module:Color~p5.Color","name":"p5.Color","kind":"constructor","memberof":"module:Color~p5.Color","params":[{"type":{"names":["p5"]},"optional":true,"description":"pointer to p5 instance.","name":"pInst"},{"type":{"names":["Array.<Number>","String"]},"description":"an array containing the color values\n                                         for red, green, blue and alpha channel\n                                         or CSS color.","name":"vals"}],"order":5},{"id":"module:Color#p5.Color#_getHue","longname":"module:Color#p5.Color#_getHue","name":"_getHue","kind":"function","scope":"instance","description":"Hue is the same in HSB and HSL, but the maximum value may be different.\nThis function will return the HSB-normalized saturation when supplied with\nan HSB color object, but will default to the HSL-normalized saturation\notherwise.","memberof":"module:Color#p5.Color","params":[],"meta":{"lineno":794,"filename":"p5.Color.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":11},{"id":"module:Color#p5.Color#_getSaturation","longname":"module:Color#p5.Color#_getSaturation","name":"_getSaturation","kind":"function","scope":"instance","description":"Saturation is scaled differently in HSB and HSL. This function will return\nthe HSB saturation when supplied with an HSB color object, but will default\nto the HSL saturation otherwise.","memberof":"module:Color#p5.Color","params":[],"meta":{"lineno":824,"filename":"p5.Color.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":12},{"id":"module:Color~p5.Color","longname":"module:Color~p5.Color","name":"Color","kind":"class","scope":"static","description":"p5.Color","memberof":"module:Color~p5","meta":{"lineno":346,"filename":"p5.Color.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":4},{"id":"module:Color~results.0]","longname":"module:Color~results.0]","name":"0]","kind":"member","scope":"static","description":"For HSB and HSL, interpret the gray level as a brightness/lightness\nvalue (they are equivalent when chroma is zero). For RGB, normalize the\ngray level according to the blue maximum.","memberof":"module:Color~results","meta":{"lineno":1052,"filename":"p5.Color.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":14},{"id":"module:Color.p5.Color._parseInputs","longname":"module:Color.p5.Color._parseInputs","name":"_parseInputs","kind":"function","scope":"static","description":"For a number of different inputs, returns a color formatted as [r, g, b, a]\narrays, with each component normalized between 0 and 1.","memberof":"module:Color.p5.Color","params":[{"type":{"names":["Array"]},"optional":true,"description":"An 'array-like' object that represents a list of\n                         arguments","name":"...args"}],"examples":["s\n<div>\n<code>\n// todo\n//\n// describe('');\n</code>\n</div>"],"returns":[{"type":{"names":["Array.<Number>"]},"description":"a color formatted as [r, g, b, a]\n                         Example:\n                         input        ==> output\n                         g            ==> [g, g, g, 255]\n                         g,a          ==> [g, g, g, a]\n                         r, g, b      ==> [r, g, b, 255]\n                         r, g, b, a   ==> [r, g, b, a]\n                         [g]          ==> [g, g, g, 255]\n                         [g, a]       ==> [g, g, g, a]\n                         [r, g, b]    ==> [r, g, b, 255]\n                         [r, g, b, a] ==> [r, g, b, a]"}],"access":"private","meta":{"lineno":864,"filename":"p5.Color.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":13},{"id":"module:Color~namedColors","longname":"module:Color~namedColors","name":"namedColors","kind":"constant","scope":"inner","description":"CSS named colors.","memberof":"module:Color","params":[],"meta":{"lineno":17,"filename":"p5.Color.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":1},{"id":"module:Color~WHITESPACE","longname":"module:Color~WHITESPACE","name":"WHITESPACE","kind":"constant","scope":"inner","description":"These regular expressions are used to build up the patterns for matching\nviable CSS color strings: fragmenting the regexes in this way increases the\nlegibility and comprehensibility of the code.\n\nNote that RGB values of .9 are not parsed by IE, but are supported here for\ncolor string consistency.","memberof":"module:Color","params":[],"meta":{"lineno":176,"filename":"p5.Color.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":2},{"id":"module:Color~colorPatterns","longname":"module:Color~colorPatterns","name":"colorPatterns","kind":"constant","scope":"inner","description":"Full color string patterns. The capture groups are necessary.","memberof":"module:Color","params":[],"meta":{"lineno":184,"filename":"p5.Color.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":3},{"id":"module:Color~toString","longname":"module:Color~toString","name":"toString","kind":"function","scope":"inner","description":"Returns the color formatted as a `String`.\n\nCalling `myColor.toString()` can be useful for debugging, as in\n`print(myColor.toString())`. It's also helpful for using p5.js with other\nlibraries.\n\nThe parameter, `format`, is optional. If a format string is passed, as in\n`myColor.toString('#rrggbb')`, it will determine how the color string is\nformatted. By default, color strings are formatted as `'rgba(r, g, b, a)'`.","memberof":"module:Color","params":[{"type":{"names":["String"]},"optional":true,"description":"how the color string will be formatted.\nLeaving this empty formats the string as rgba(r, g, b, a).\n'#rgb' '#rgba' '#rrggbb' and '#rrggbbaa' format as hexadecimal color codes.\n'rgb' 'hsb' and 'hsl' return the color formatted in the specified color mode.\n'rgba' 'hsba' and 'hsla' are the same as above but with alpha channels.\n'rgb%' 'hsb%' 'hsl%' 'rgba%' 'hsba%' and 'hsla%' format as percentages.","name":"format"}],"returns":[{"type":{"names":["String"]},"description":"the formatted string.\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Create a p5.Color object.\n  let myColor = color('darkorchid');\n\n  // Style the text.\n  textAlign(CENTER);\n  textSize(16);\n\n  // Display the text.\n  text(myColor.toString('#rrggbb'), 50, 50);\n\n  describe('The text \"#9932cc\" written in purple on a gray background.');\n}\n</code>\n</div>"}],"meta":{"lineno":362,"filename":"p5.Color.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":6},{"id":"module:Color~setRed","longname":"module:Color~setRed","name":"setRed","kind":"function","scope":"inner","description":"Sets the red component of a color.\n\nThe range depends on the <a href=\"#/p5/colorMode\">colorMode()</a>. In the\ndefault RGB mode it's between 0 and 255.","memberof":"module:Color","params":[{"type":{"names":["Number"]},"description":"the new red value.","name":"red"}],"examples":["s\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Create a p5.Color object.\n  let c = color(255, 128, 128);\n\n  // Draw the left rectangle.\n  noStroke();\n  fill(c);\n  rect(15, 20, 35, 60);\n\n  // Change the red value.\n  c.setRed(64);\n\n  // Draw the right rectangle.\n  fill(c);\n  rect(50, 20, 35, 60);\n\n  describe('Two rectangles. The left one is salmon pink and the right one is teal.');\n}\n</code>\n</div>"],"meta":{"lineno":571,"filename":"p5.Color.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":7},{"id":"module:Color~setGreen","longname":"module:Color~setGreen","name":"setGreen","kind":"function","scope":"inner","description":"Sets the green component of a color.\n\nThe range depends on the <a href=\"#/p5/colorMode\">colorMode()</a>. In the\ndefault RGB mode it's between 0 and 255.","memberof":"module:Color","params":[{"type":{"names":["Number"]},"description":"the new green value.","name":"green"}],"examples":["s\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Create a p5.Color object.\n  let c = color(255, 128, 128);\n\n  // Draw the left rectangle.\n  noStroke();\n  fill(c);\n  rect(15, 20, 35, 60);\n\n  // Change the green value.\n  c.setGreen(255);\n\n  // Draw the right rectangle.\n  fill(c);\n  rect(50, 20, 35, 60);\n\n  describe('Two rectangles. The left one is salmon pink and the right one is yellow.');\n}\n</code>\n</div>"],"meta":{"lineno":613,"filename":"p5.Color.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":8},{"id":"module:Color~setBlue","longname":"module:Color~setBlue","name":"setBlue","kind":"function","scope":"inner","description":"Sets the blue component of a color.\n\nThe range depends on the <a href=\"#/p5/colorMode\">colorMode()</a>. In the\ndefault RGB mode it's between 0 and 255.","memberof":"module:Color","params":[{"type":{"names":["Number"]},"description":"the new blue value.","name":"blue"}],"examples":["s\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Create a p5.Color object.\n  let c = color(255, 128, 128);\n\n  // Draw the left rectangle.\n  noStroke();\n  fill(c);\n  rect(15, 20, 35, 60);\n\n  // Change the blue value.\n  c.setBlue(255);\n\n  // Draw the right rectangle.\n  fill(c);\n  rect(50, 20, 35, 60);\n\n  describe('Two rectangles. The left one is salmon pink and the right one is pale fuchsia.');\n}\n</code>\n</div>"],"meta":{"lineno":655,"filename":"p5.Color.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":9},{"id":"module:Color~setAlpha","longname":"module:Color~setAlpha","name":"setAlpha","kind":"function","scope":"inner","description":"Sets the alpha (transparency) value of a color.\n\nThe range depends on the\n<a href=\"#/p5/colorMode\">colorMode()</a>. In the default RGB mode it's\nbetween 0 and 255.","memberof":"module:Color","params":[{"type":{"names":["Number"]},"description":"the new alpha value.","name":"alpha"}],"examples":["s\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Create a p5.Color object.\n  let c = color(255, 128, 128);\n\n  // Draw the left rectangle.\n  noStroke();\n  fill(c);\n  rect(15, 20, 35, 60);\n\n  // Change the alpha value.\n  c.setAlpha(128);\n\n  // Draw the right rectangle.\n  fill(c);\n  rect(50, 20, 35, 60);\n\n  describe('Two rectangles. The left one is salmon pink and the right one is faded pink.');\n}\n</code>\n</div>"],"meta":{"lineno":697,"filename":"p5.Color.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":10},{"id":"module:Structure","longname":"module:Structure","name":"Structure","kind":"module","requires":["module:core"],"customTags":[{"tag":"submodule","value":"Structure"},{"tag":"for","value":"p5"}],"meta":{"lineno":1,"filename":"structure.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":0},{"id":"module:Structure~noLoop","longname":"module:Structure~noLoop","name":"noLoop","kind":"function","scope":"inner","description":"Stops the code in <a href=\"#/p5/draw\">draw()</a> from running repeatedly.\n\nBy default, <a href=\"#/p5/draw\">draw()</a> tries to run 60 times per\nsecond. Calling `noLoop()` stops <a href=\"#/p5/draw\">draw()</a> from\nrepeating. The draw loop can be restarted by calling\n<a href=\"#/p5/loop\">loop()</a>. <a href=\"#/p5/draw\">draw()</a> can be run\nonce by calling <a href=\"#/p5/redraw\">redraw()</a>.\n\nThe <a href=\"#/p5/isLooping\">isLooping()</a> function can be used to check\nwhether a sketch is looping, as in `isLooping() === true`.","memberof":"module:Structure","examples":["<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  // Turn off the draw loop.\n  noLoop();\n\n  describe('A white half-circle on the left edge of a gray square.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Calculate the circle's x-coordinate.\n  let x = frameCount;\n\n  // Draw the circle.\n  // Normally, the circle would move from left to right.\n  circle(x, 50, 20);\n}\n</code>\n</div>\n\n<div>\n<code>\n// Double-click to stop the draw loop.\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  // Slow the frame rate.\n  frameRate(5);\n\n  describe('A white circle moves randomly on a gray background. It stops moving when the user double-clicks.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Calculate the circle's coordinates.\n  let x = random(0, 100);\n  let y = random(0, 100);\n\n  // Draw the circle.\n  // Normally, the circle would move from left to right.\n  circle(x, y, 20);\n}\n\n// Stop the draw loop when the user double-clicks.\nfunction doubleClicked() {\n  noLoop();\n}\n</code>\n</div>\n\n<div>\n<code>\nlet startButton;\nlet stopButton;\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  // Create the button elements and place them\n  // beneath the canvas.\n  startButton = createButton('▶');\n  startButton.position(0, 100);\n  startButton.size(50, 20);\n  stopButton = createButton('◾');\n  stopButton.position(50, 100);\n  stopButton.size(50, 20);\n\n  // Set functions to call when the buttons are pressed.\n  startButton.mousePressed(loop);\n  stopButton.mousePressed(noLoop);\n\n  // Slow the frame rate.\n  frameRate(5);\n\n  describe(\n    'A white circle moves randomly on a gray background. Play and stop buttons are shown beneath the canvas. The circle stops or starts moving when the user presses a button.'\n  );\n}\n\nfunction draw() {\n  background(200);\n\n  // Calculate the circle's coordinates.\n  let x = random(0, 100);\n  let y = random(0, 100);\n\n  // Draw the circle.\n  // Normally, the circle would move from left to right.\n  circle(x, y, 20);\n}\n</code>\n</div>"],"meta":{"lineno":9,"filename":"structure.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":1},{"id":"module:Structure~loop","longname":"module:Structure~loop","name":"loop","kind":"function","scope":"inner","description":"Resumes the draw loop after <a href=\"#/p5/noLoop\">noLoop()</a> has been\ncalled.\n\nBy default, <a href=\"#/p5/draw\">draw()</a> tries to run 60 times per\nsecond. Calling <a href=\"#/p5/noLoop\">noLoop()</a> stops\n<a href=\"#/p5/draw\">draw()</a> from repeating. The draw loop can be\nrestarted by calling `loop()`.\n\nThe <a href=\"#/p5/isLooping\">isLooping()</a> function can be used to check\nwhether a sketch is looping, as in `isLooping() === true`.","memberof":"module:Structure","examples":["<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  // Turn off the draw loop.\n  noLoop();\n\n  describe(\n    'A white half-circle on the left edge of a gray square. The circle starts moving to the right when the user double-clicks.'\n  );\n}\n\nfunction draw() {\n  background(200);\n\n  // Calculate the circle's x-coordinate.\n  let x = frameCount;\n\n  // Draw the circle.\n  circle(x, 50, 20);\n}\n\n// Resume the draw loop when the user double-clicks.\nfunction doubleClicked() {\n  loop();\n}\n</code>\n</div>\n\n<div>\n<code>\nlet startButton;\nlet stopButton;\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  // Create the button elements and place them\n  // beneath the canvas.\n  startButton = createButton('▶');\n  startButton.position(0, 100);\n  startButton.size(50, 20);\n  stopButton = createButton('◾');\n  stopButton.position(50, 100);\n  stopButton.size(50, 20);\n\n  // Set functions to call when the buttons are pressed.\n  startButton.mousePressed(loop);\n  stopButton.mousePressed(noLoop);\n\n  // Slow the frame rate.\n  frameRate(5);\n\n  describe(\n    'A white circle moves randomly on a gray background. Play and stop buttons are shown beneath the canvas. The circle stops or starts moving when the user presses a button.'\n  );\n}\n\nfunction draw() {\n  background(200);\n\n  // Calculate the circle's coordinates.\n  let x = random(0, 100);\n  let y = random(0, 100);\n\n  // Draw the circle.\n  // Normally, the circle would move from left to right.\n  circle(x, y, 20);\n}\n</code>\n</div>"],"meta":{"lineno":127,"filename":"structure.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":2},{"id":"module:Structure~isLooping","longname":"module:Structure~isLooping","name":"isLooping","kind":"function","scope":"inner","description":"Returns `true` if the draw loop is running and `false` if not.\n\nBy default, <a href=\"#/p5/draw\">draw()</a> tries to run 60 times per\nsecond. Calling <a href=\"#/p5/noLoop\">noLoop()</a> stops\n<a href=\"#/p5/draw\">draw()</a> from repeating. The draw loop can be\nrestarted by calling <a href=\"#/p5/loop\">loop()</a>.\n\nThe `isLooping()` function can be used to check whether a sketch is\nlooping, as in `isLooping() === true`.","memberof":"module:Structure","examples":["<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  describe('A white circle drawn against a gray background. When the user double-clicks, the circle stops or resumes following the mouse.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Draw the circle at the mouse's position.\n  circle(mouseX, mouseY, 20);\n}\n\n// Toggle the draw loop when the user double-clicks.\nfunction doubleClicked() {\n  if (isLooping() === true) {\n    noLoop();\n  } else {\n    loop();\n  }\n}\n</code>\n</div>"],"returns":[{"type":{"names":["boolean"]}}],"meta":{"lineno":224,"filename":"structure.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":3},{"id":"module:Structure~push","longname":"module:Structure~push","name":"push","kind":"function","scope":"inner","description":"Begins a drawing group that contains its own styles and transformations.\n\nBy default, styles such as <a href=\"#/p5/fill\">fill()</a> and\ntransformations such as <a href=\"#/p5/rotate\">rotate()</a> are applied to\nall drawing that follows. The `push()` and <a href=\"#/p5/pop\">pop()</a>\nfunctions can limit the effect of styles and transformations to a specific\ngroup of shapes, images, and text. For example, a group of shapes could be\ntranslated to follow the mouse without affecting the rest of the sketch:\n\n```js\n// Begin the drawing group.\npush();\n\n// Translate the origin to the mouse's position.\ntranslate(mouseX, mouseY);\n\n// Style the face.\nnoStroke();\nfill('green');\n\n// Draw the face.\ncircle(0, 0, 60);\n\n// Style the eyes.\nfill('white');\n\n// Draw the left eye.\nellipse(-20, -20, 30, 20);\n\n// Draw the right eye.\nellipse(20, -20, 30, 20);\n\n// End the drawing group.\npop();\n\n// Draw a bug.\nlet x = random(0, 100);\nlet y = random(0, 100);\ntext('🦟', x, y);\n```\n\nIn the code snippet above, the bug's position isn't affected by\n`translate(mouseX, mouseY)` because that transformation is contained\nbetween `push()` and <a href=\"#/p5/pop\">pop()</a>. The bug moves around\nthe entire canvas as expected.\n\nNote: `push()` and <a href=\"#/p5/pop\">pop()</a> are always called as a\npair. Both functions are required to begin and end a drawing group.\n\n`push()` and <a href=\"#/p5/pop\">pop()</a> can also be nested to create\nsubgroups. For example, the code snippet above could be changed to give\nmore detail to the frog’s eyes:\n\n```js\n// Begin the drawing group.\npush();\n\n// Translate the origin to the mouse's position.\ntranslate(mouseX, mouseY);\n\n// Style the face.\nnoStroke();\nfill('green');\n\n// Draw a face.\ncircle(0, 0, 60);\n\n// Style the eyes.\nfill('white');\n\n// Draw the left eye.\npush();\ntranslate(-20, -20);\nellipse(0, 0, 30, 20);\nfill('black');\ncircle(0, 0, 8);\npop();\n\n// Draw the right eye.\npush();\ntranslate(20, -20);\nellipse(0, 0, 30, 20);\nfill('black');\ncircle(0, 0, 8);\npop();\n\n// End the drawing group.\npop();\n\n// Draw a bug.\nlet x = random(0, 100);\nlet y = random(0, 100);\ntext('🦟', x, y);\n```\n\nIn this version, the code to draw each eye is contained between its own\n`push()` and <a href=\"#/p5/pop\">pop()</a> functions. Doing so makes it\neasier to add details in the correct part of a drawing.\n\n`push()` and <a href=\"#/p5/pop\">pop()</a> contain the effects of the\nfollowing functions:\n\n- <a href=\"#/p5/fill\">fill()</a>\n- <a href=\"#/p5/noFill\">noFill()</a>\n- <a href=\"#/p5/noStroke\">noStroke()</a>\n- <a href=\"#/p5/stroke\">stroke()</a>\n- <a href=\"#/p5/tint\">tint()</a>\n- <a href=\"#/p5/noTint\">noTint()</a>\n- <a href=\"#/p5/strokeWeight\">strokeWeight()</a>\n- <a href=\"#/p5/strokeCap\">strokeCap()</a>\n- <a href=\"#/p5/strokeJoin\">strokeJoin()</a>\n- <a href=\"#/p5/imageMode\">imageMode()</a>\n- <a href=\"#/p5/rectMode\">rectMode()</a>\n- <a href=\"#/p5/ellipseMode\">ellipseMode()</a>\n- <a href=\"#/p5/colorMode\">colorMode()</a>\n- <a href=\"#/p5/textAlign\">textAlign()</a>\n- <a href=\"#/p5/textFont\">textFont()</a>\n- <a href=\"#/p5/textSize\">textSize()</a>\n- <a href=\"#/p5/textLeading\">textLeading()</a>\n- <a href=\"#/p5/applyMatrix\">applyMatrix()</a>\n- <a href=\"#/p5/resetMatrix\">resetMatrix()</a>\n- <a href=\"#/p5/rotate\">rotate()</a>\n- <a href=\"#/p5/scale\">scale()</a>\n- <a href=\"#/p5/shearX\">shearX()</a>\n- <a href=\"#/p5/shearY\">shearY()</a>\n- <a href=\"#/p5/translate\">translate()</a>\n\nIn WebGL mode, `push()` and <a href=\"#/p5/pop\">pop()</a> contain the\neffects of a few additional styles:\n\n- <a href=\"#/p5/setCamera\">setCamera()</a>\n- <a href=\"#/p5/ambientLight\">ambientLight()</a>\n- <a href=\"#/p5/directionalLight\">directionalLight()</a>\n- <a href=\"#/p5/pointLight\">pointLight()</a> <a href=\"#/p5/texture\">texture()</a>\n- <a href=\"#/p5/specularMaterial\">specularMaterial()</a>\n- <a href=\"#/p5/shininess\">shininess()</a>\n- <a href=\"#/p5/normalMaterial\">normalMaterial()</a>\n- <a href=\"#/p5/shader\">shader()</a>","memberof":"module:Structure","examples":["<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Draw the left circle.\n  circle(25, 50, 20);\n\n  // Begin the drawing group.\n  push();\n\n  // Translate the origin to the center.\n  translate(50, 50);\n\n  // Style the circle.\n  strokeWeight(5);\n  stroke('royalblue');\n  fill('orange');\n\n  // Draw the circle.\n  circle(0, 0, 20);\n\n  // End the drawing group.\n  pop();\n\n  // Draw the right circle.\n  circle(75, 50, 20);\n\n  describe(\n    'Three circles drawn in a row on a gray background. The left and right circles are white with thin, black borders. The middle circle is orange with a thick, blue border.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  // Slow the frame rate.\n  frameRate(24);\n\n  describe('A mosquito buzzes in front of a green frog. The frog follows the mouse as the user moves.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Begin the drawing group.\n  push();\n\n  // Translate the origin to the mouse's position.\n  translate(mouseX, mouseY);\n\n  // Style the face.\n  noStroke();\n  fill('green');\n\n  // Draw a face.\n  circle(0, 0, 60);\n\n  // Style the eyes.\n  fill('white');\n\n  // Draw the left eye.\n  push();\n  translate(-20, -20);\n  ellipse(0, 0, 30, 20);\n  fill('black');\n  circle(0, 0, 8);\n  pop();\n\n  // Draw the right eye.\n  push();\n  translate(20, -20);\n  ellipse(0, 0, 30, 20);\n  fill('black');\n  circle(0, 0, 8);\n  pop();\n\n  // End the drawing group.\n  pop();\n\n  // Draw a bug.\n  let x = random(0, 100);\n  let y = random(0, 100);\n  text('🦟', x, y);\n}\n</code>\n</div>\n\n<div>\n<code>\n// Click and drag the mouse to view the scene from different angles.\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe(\n    'Two spheres drawn on a gray background. The sphere on the left is red and lit from the front. The sphere on the right is a blue wireframe.'\n  );\n}\n\nfunction draw() {\n  background(200);\n\n  // Enable orbiting with the mouse.\n  orbitControl();\n\n  // Draw the red sphere.\n  push();\n  translate(-25, 0, 0);\n  noStroke();\n  directionalLight(255, 0, 0, 0, 0, -1);\n  sphere(20);\n  pop();\n\n  // Draw the blue sphere.\n  push();\n  translate(25, 0, 0);\n  strokeWeight(0.3);\n  stroke(0, 0, 255);\n  noFill();\n  sphere(20);\n  pop();\n}\n</code>\n</div>"],"meta":{"lineno":269,"filename":"structure.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":4},{"id":"module:Structure~pop","longname":"module:Structure~pop","name":"pop","kind":"function","scope":"inner","description":"Ends a drawing group that contains its own styles and transformations.\n\nBy default, styles such as <a href=\"#/p5/fill\">fill()</a> and\ntransformations such as <a href=\"#/p5/rotate\">rotate()</a> are applied to\nall drawing that follows. The <a href=\"#/p5/push\">push()</a> and `pop()`\nfunctions can limit the effect of styles and transformations to a specific\ngroup of shapes, images, and text. For example, a group of shapes could be\ntranslated to follow the mouse without affecting the rest of the sketch:\n\n```js\n// Begin the drawing group.\npush();\n\n// Translate the origin to the mouse's position.\ntranslate(mouseX, mouseY);\n\n// Style the face.\nnoStroke();\nfill('green');\n\n// Draw the face.\ncircle(0, 0, 60);\n\n// Style the eyes.\nfill('white');\n\n// Draw the left eye.\nellipse(-20, -20, 30, 20);\n\n// Draw the right eye.\nellipse(20, -20, 30, 20);\n\n// End the drawing group.\npop();\n\n// Draw a bug.\nlet x = random(0, 100);\nlet y = random(0, 100);\ntext('🦟', x, y);\n```\n\nIn the code snippet above, the bug's position isn't affected by\n`translate(mouseX, mouseY)` because that transformation is contained\nbetween <a href=\"#/p5/push\">push()</a> and `pop()`. The bug moves around\nthe entire canvas as expected.\n\nNote: <a href=\"#/p5/push\">push()</a> and `pop()` are always called as a\npair. Both functions are required to begin and end a drawing group.\n\n<a href=\"#/p5/push\">push()</a> and `pop()` can also be nested to create\nsubgroups. For example, the code snippet above could be changed to give\nmore detail to the frog’s eyes:\n\n```js\n// Begin the drawing group.\npush();\n\n// Translate the origin to the mouse's position.\ntranslate(mouseX, mouseY);\n\n// Style the face.\nnoStroke();\nfill('green');\n\n// Draw a face.\ncircle(0, 0, 60);\n\n// Style the eyes.\nfill('white');\n\n// Draw the left eye.\npush();\ntranslate(-20, -20);\nellipse(0, 0, 30, 20);\nfill('black');\ncircle(0, 0, 8);\npop();\n\n// Draw the right eye.\npush();\ntranslate(20, -20);\nellipse(0, 0, 30, 20);\nfill('black');\ncircle(0, 0, 8);\npop();\n\n// End the drawing group.\npop();\n\n// Draw a bug.\nlet x = random(0, 100);\nlet y = random(0, 100);\ntext('🦟', x, y);\n```\n\nIn this version, the code to draw each eye is contained between its own\n<a href=\"#/p5/push\">push()</a> and `pop()` functions. Doing so makes it\neasier to add details in the correct part of a drawing.\n\n<a href=\"#/p5/push\">push()</a> and `pop()` contain the effects of the\nfollowing functions:\n\n- <a href=\"#/p5/fill\">fill()</a>\n- <a href=\"#/p5/noFill\">noFill()</a>\n- <a href=\"#/p5/noStroke\">noStroke()</a>\n- <a href=\"#/p5/stroke\">stroke()</a>\n- <a href=\"#/p5/tint\">tint()</a>\n- <a href=\"#/p5/noTint\">noTint()</a>\n- <a href=\"#/p5/strokeWeight\">strokeWeight()</a>\n- <a href=\"#/p5/strokeCap\">strokeCap()</a>\n- <a href=\"#/p5/strokeJoin\">strokeJoin()</a>\n- <a href=\"#/p5/imageMode\">imageMode()</a>\n- <a href=\"#/p5/rectMode\">rectMode()</a>\n- <a href=\"#/p5/ellipseMode\">ellipseMode()</a>\n- <a href=\"#/p5/colorMode\">colorMode()</a>\n- <a href=\"#/p5/textAlign\">textAlign()</a>\n- <a href=\"#/p5/textFont\">textFont()</a>\n- <a href=\"#/p5/textSize\">textSize()</a>\n- <a href=\"#/p5/textLeading\">textLeading()</a>\n- <a href=\"#/p5/applyMatrix\">applyMatrix()</a>\n- <a href=\"#/p5/resetMatrix\">resetMatrix()</a>\n- <a href=\"#/p5/rotate\">rotate()</a>\n- <a href=\"#/p5/scale\">scale()</a>\n- <a href=\"#/p5/shearX\">shearX()</a>\n- <a href=\"#/p5/shearY\">shearY()</a>\n- <a href=\"#/p5/translate\">translate()</a>\n\nIn WebGL mode, <a href=\"#/p5/push\">push()</a> and `pop()` contain the\neffects of a few additional styles:\n\n- <a href=\"#/p5/setCamera\">setCamera()</a>\n- <a href=\"#/p5/ambientLight\">ambientLight()</a>\n- <a href=\"#/p5/directionalLight\">directionalLight()</a>\n- <a href=\"#/p5/pointLight\">pointLight()</a> <a href=\"#/p5/texture\">texture()</a>\n- <a href=\"#/p5/specularMaterial\">specularMaterial()</a>\n- <a href=\"#/p5/shininess\">shininess()</a>\n- <a href=\"#/p5/normalMaterial\">normalMaterial()</a>\n- <a href=\"#/p5/shader\">shader()</a>","memberof":"module:Structure","examples":["<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Draw the left circle.\n  circle(25, 50, 20);\n\n  // Begin the drawing group.\n  push();\n\n  // Translate the origin to the center.\n  translate(50, 50);\n\n  // Style the circle.\n  strokeWeight(5);\n  stroke('royalblue');\n  fill('orange');\n\n  // Draw the circle.\n  circle(0, 0, 20);\n\n  // End the drawing group.\n  pop();\n\n  // Draw the right circle.\n  circle(75, 50, 20);\n\n  describe(\n    'Three circles drawn in a row on a gray background. The left and right circles are white with thin, black borders. The middle circle is orange with a thick, blue border.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  // Slow the frame rate.\n  frameRate(24);\n\n  describe('A mosquito buzzes in front of a green frog. The frog follows the mouse as the user moves.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Begin the drawing group.\n  push();\n\n  // Translate the origin to the mouse's position.\n  translate(mouseX, mouseY);\n\n  // Style the face.\n  noStroke();\n  fill('green');\n\n  // Draw a face.\n  circle(0, 0, 60);\n\n  // Style the eyes.\n  fill('white');\n\n  // Draw the left eye.\n  push();\n  translate(-20, -20);\n  ellipse(0, 0, 30, 20);\n  fill('black');\n  circle(0, 0, 8);\n  pop();\n\n  // Draw the right eye.\n  push();\n  translate(20, -20);\n  ellipse(0, 0, 30, 20);\n  fill('black');\n  circle(0, 0, 8);\n  pop();\n\n  // End the drawing group.\n  pop();\n\n  // Draw a bug.\n  let x = random(0, 100);\n  let y = random(0, 100);\n  text('🦟', x, y);\n}\n</code>\n</div>\n\n<div>\n<code>\n// Click and drag the mouse to view the scene from different angles.\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe(\n    'Two spheres drawn on a gray background. The sphere on the left is red and lit from the front. The sphere on the right is a blue wireframe.'\n  );\n}\n\nfunction draw() {\n  background(200);\n\n  // Enable orbiting with the mouse.\n  orbitControl();\n\n  // Draw the red sphere.\n  push();\n  translate(-25, 0, 0);\n  noStroke();\n  directionalLight(255, 0, 0, 0, 0, -1);\n  sphere(20);\n  pop();\n\n  // Draw the blue sphere.\n  push();\n  translate(25, 0, 0);\n  strokeWeight(0.3);\n  stroke(0, 0, 255);\n  noFill();\n  sphere(20);\n  pop();\n}\n</code>\n</div>"],"meta":{"lineno":553,"filename":"structure.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":5},{"id":"module:Structure~redraw","longname":"module:Structure~redraw","name":"redraw","kind":"function","scope":"inner","description":"Runs the code in <a href=\"#/p5/draw\">draw()</a> once.\n\nBy default, <a href=\"#/p5/draw\">draw()</a> tries to run 60 times per\nsecond. Calling <a href=\"#/p5/noLoop\">noLoop()</a> stops\n<a href=\"#/p5/draw\">draw()</a> from repeating. Calling `redraw()` will\nexecute the code in the <a href=\"#/p5/draw\">draw()</a> function a set\nnumber of times.\n\nThe parameter, `n`, is optional. If a number is passed, as in `redraw(5)`,\nthen the draw loop will run the given number of times. By default, `n` is\n1.","memberof":"module:Structure","params":[{"type":{"names":["Integer"]},"optional":true,"description":"number of times to run <a href=\"#/p5/draw\">draw()</a>. Defaults to 1.","name":"n"}],"examples":["<div>\n<code>\n// Double-click the canvas to move the circle.\n\nlet x = 0;\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  // Turn off the draw loop.\n  noLoop();\n\n  describe(\n    'A white half-circle on the left edge of a gray square. The circle moves a little to the right when the user double-clicks.'\n  );\n}\n\nfunction draw() {\n  background(200);\n\n  // Draw the circle.\n  circle(x, 50, 20);\n\n  // Increment x.\n  x += 5;\n}\n\n// Run the draw loop when the user double-clicks.\nfunction doubleClicked() {\n  redraw();\n}\n</code>\n</div>\n\n<div>\n<code>\n// Double-click the canvas to move the circle.\n\nlet x = 0;\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  // Turn off the draw loop.\n  noLoop();\n\n  describe(\n    'A white half-circle on the left edge of a gray square. The circle hops to the right when the user double-clicks.'\n  );\n}\n\nfunction draw() {\n  background(200);\n\n  // Draw the circle.\n  circle(x, 50, 20);\n\n  // Increment x.\n  x += 5;\n}\n\n// Run the draw loop three times when the user double-clicks.\nfunction doubleClicked() {\n  redraw(3);\n}\n</code>\n</div>"],"meta":{"lineno":838,"filename":"structure.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":6},{"id":"module:Structure~p5","longname":"module:Structure~p5","name":"p5","kind":"function","scope":"inner","description":"Creates a new sketch in \"instance\" mode.\n\nAll p5.js sketches are instances of the `p5` class. Put another way, all\np5.js sketches are objects with methods including `pInst.setup()`,\n`pInst.draw()`, `pInst.circle()`, and `pInst.fill()`. By default, sketches\nrun in \"global mode\" to hide some of this complexity.\n\nIn global mode, a default instance of the `p5` class is created\nautomatically. The default `p5` instance searches the web page's source\ncode for declarations of system functions such as `setup()`, `draw()`,\nand `mousePressed()`, then attaches those functions to itself as methods.\nCalling a function such as `circle()` in global mode actually calls the\ndefault `p5` object's `pInst.circle()` method.\n\nIt's often helpful to isolate the code within sketches from the rest of the\ncode on a web page. Two common use cases are web pages that use other\nJavaScript libraries and web pages with multiple sketches. \"Instance mode\"\nmakes it easy to support both of these scenarios.\n\nInstance mode sketches support the same API as global mode sketches. They\nuse a function to bundle, or encapsulate, an entire sketch. The function\ncontaining the sketch is then passed to the `p5()` constructor.\n\nThe first parameter, `sketch`, is a function that contains the sketch. For\nexample, the statement `new p5(mySketch)` would create a new instance mode\nsketch from a function named `mySketch`. The function should have one\nparameter, `p`, that's a `p5` object.\n\nThe second parameter, `node`, is optional. If a string is passed, as in\n`new p5(mySketch, 'sketch-one')` the new instance mode sketch will become a\nchild of the HTML element with the id `sketch-one`. If an HTML element is\npassed, as in `new p5(mySketch, myElement)`, then the new instance mode\nsketch will become a child of the `Element` object called `myElement`.","memberof":"module:Structure","params":[{"type":{"names":["Object"]},"description":"function containing the sketch.","name":"sketch"},{"type":{"names":["String","HTMLElement"]},"description":"ID or reference to the HTML element that will contain the sketch.","name":"node"}],"examples":["<div class='norender notest'>\n<code>\n// Declare the function containing the sketch.\nfunction sketch(p) {\n\n  // Declare the setup() method.\n  p.setup = function () {\n    p.createCanvas(100, 100);\n\n    p.describe('A white circle drawn on a gray background.');\n  };\n\n  // Declare the draw() method.\n  p.draw = function () {\n    p.background(200);\n\n    // Draw the circle.\n    p.circle(50, 50, 20);\n  };\n}\n\n// Initialize the sketch.\nnew p5(sketch);\n</code>\n</div>\n\n<div class='norender notest'>\n<code>\n// Declare the function containing the sketch.\nfunction sketch(p) {\n  // Create the sketch's variables within its scope.\n  let x = 50;\n  let y = 50;\n\n  // Declare the setup() method.\n  p.setup = function () {\n    p.createCanvas(100, 100);\n\n    p.describe('A white circle moves randomly on a gray background.');\n  };\n\n  // Declare the draw() method.\n  p.draw = function () {\n    p.background(200);\n\n    // Update x and y.\n    x += p.random(-1, 1);\n    y += p.random(-1, 1);\n\n    // Draw the circle.\n    p.circle(x, y, 20);\n  };\n}\n\n// Initialize the sketch.\nnew p5(sketch);\n</code>\n</div>\n\n<div class='norender notest'>\n<code>\n// Declare the function containing the sketch.\nfunction sketch(p) {\n\n  // Declare the setup() method.\n  p.setup = function () {\n    p.createCanvas(100, 100);\n\n    p.describe('A white circle drawn on a gray background.');\n  };\n\n  // Declare the draw() method.\n  p.draw = function () {\n    p.background(200);\n\n    // Draw the circle.\n    p.circle(50, 50, 20);\n  };\n}\n\n// Select the web page's body element.\nlet body = document.querySelector('body');\n\n// Initialize the sketch and attach it to the web page's body.\nnew p5(sketch, body);\n</code>\n</div>\n\n<div class='norender notest'>\n<code>\n// Declare the function containing the sketch.\nfunction sketch(p) {\n\n  // Declare the setup() method.\n  p.setup = function () {\n    p.createCanvas(100, 100);\n\n    p.describe(\n      'A white circle drawn on a gray background. The circle follows the mouse as the user moves.'\n    );\n  };\n\n  // Declare the draw() method.\n  p.draw = function () {\n    p.background(200);\n\n    // Draw the circle.\n    p.circle(p.mouseX, p.mouseY, 20);\n  };\n}\n\n// Initialize the sketch.\nnew p5(sketch);\n</code>\n</div>\n\n<div class='norender notest'>\n<code>\n// Declare the function containing the sketch.\nfunction sketch(p) {\n\n  // Declare the setup() method.\n  p.setup = function () {\n    p.createCanvas(100, 100);\n\n    p.describe(\n      'A white circle drawn on a gray background. The circle follows the mouse as the user moves. The circle becomes black when the user double-clicks.'\n    );\n  };\n\n  // Declare the draw() method.\n  p.draw = function () {\n    p.background(200);\n\n    // Draw the circle.\n    p.circle(p.mouseX, p.mouseY, 20);\n  };\n\n  // Declare the doubleClicked() method.\n  p.doubleClicked = function () {\n    // Change the fill color when the user double-clicks.\n    p.fill(0);\n  };\n}\n\n// Initialize the sketch.\nnew p5(sketch);\n</code>\n</div>"],"meta":{"lineno":959,"filename":"structure.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":7},{"id":"module:Shape","longname":"module:Shape","name":"Shape","kind":"module","requires":["module:core","module:constants"],"customTags":[{"tag":"submodule","value":"Vertex"},{"tag":"for","value":"p5"}],"meta":{"lineno":1,"filename":"vertex.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":0},{"id":"module:Shape~beginContour","longname":"module:Shape~beginContour","name":"beginContour","kind":"function","scope":"inner","description":"Begins creating a hole within a flat shape.\n\nThe `beginContour()` and <a href=\"#/p5/endContour\">endContour()</a>\nfunctions allow for creating negative space within custom shapes that are\nflat. `beginContour()` begins adding vertices to a negative space and\n<a href=\"#/p5/endContour\">endContour()</a> stops adding them.\n`beginContour()` and <a href=\"#/p5/endContour\">endContour()</a> must be\ncalled between <a href=\"#/p5/beginShape\">beginShape()</a> and\n<a href=\"#/p5/endShape\">endShape()</a>.\n\nTransformations such as <a href=\"#/p5/translate\">translate()</a>,\n<a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a>\ndon't work between `beginContour()` and\n<a href=\"#/p5/endContour\">endContour()</a>. It's also not possible to use\nother shapes, such as <a href=\"#/p5/ellipse\">ellipse()</a> or\n<a href=\"#/p5/rect\">rect()</a>, between `beginContour()` and\n<a href=\"#/p5/endContour\">endContour()</a>.\n\nNote: The vertices that define a negative space must \"wind\" in the opposite\ndirection from the outer shape. First, draw vertices for the outer shape\nclockwise order. Then, draw vertices for the negative space in\ncounter-clockwise order.","memberof":"module:Shape","examples":["<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Start drawing the shape.\n  beginShape();\n\n  // Exterior vertices, clockwise winding.\n  vertex(10, 10);\n  vertex(90, 10);\n  vertex(90, 90);\n  vertex(10, 90);\n\n  // Interior vertices, counter-clockwise winding.\n  beginContour();\n  vertex(30, 30);\n  vertex(30, 70);\n  vertex(70, 70);\n  vertex(70, 30);\n  endContour();\n\n  // Stop drawing the shape.\n  endShape(CLOSE);\n\n  describe('A white square with a square hole in its center drawn on a gray background.');\n}\n</code>\n</div>\n\n<div>\n<code>\n// Click and drag the mouse to view the scene from different angles.\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe('A white square with a square hole in its center drawn on a gray background.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Enable orbiting with the mouse.\n  orbitControl();\n\n  // Start drawing the shape.\n  beginShape();\n\n  // Exterior vertices, clockwise winding.\n  vertex(-40, -40);\n  vertex(40, -40);\n  vertex(40, 40);\n  vertex(-40, 40);\n\n  // Interior vertices, counter-clockwise winding.\n  beginContour();\n  vertex(-20, -20);\n  vertex(-20, 20);\n  vertex(20, 20);\n  vertex(20, -20);\n  endContour();\n\n  // Stop drawing the shape.\n  endShape(CLOSE);\n}\n</code>\n</div>"],"chainable":true,"meta":{"lineno":20,"filename":"vertex.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":1},{"id":"module:Shape~beginShape","longname":"module:Shape~beginShape","name":"beginShape","kind":"function","scope":"inner","description":"Begins adding vertices to a custom shape.\n\nThe `beginShape()` and <a href=\"#/p5/endShape\">endShape()</a> functions\nallow for creating custom shapes in 2D or 3D. `beginShape()` begins adding\nvertices to a custom shape and <a href=\"#/p5/endShape\">endShape()</a> stops\nadding them.\n\nThe parameter, `kind`, sets the kind of shape to make. By default, any\nirregular polygon can be drawn. The available modes for kind are:\n\n- `POINTS` to draw a series of points.\n- `LINES` to draw a series of unconnected line segments.\n- `TRIANGLES` to draw a series of separate triangles.\n- `TRIANGLE_FAN` to draw a series of connected triangles sharing the first vertex in a fan-like fashion.\n- `TRIANGLE_STRIP` to draw a series of connected triangles in strip fashion.\n- `QUADS` to draw a series of separate quadrilaterals (quads).\n- `QUAD_STRIP` to draw quad strip using adjacent edges to form the next quad.\n- `TESS` to create a filling curve by explicit tessellation (WebGL only).\n\nAfter calling `beginShape()`, shapes can be built by calling\n<a href=\"#/p5/vertex\">vertex()</a>,\n<a href=\"#/p5/bezierVertex\">bezierVertex()</a>,\n<a href=\"#/p5/quadraticVertex\">quadraticVertex()</a>, and/or\n<a href=\"#/p5/curveVertex\">curveVertex()</a>. Calling\n<a href=\"#/p5/endShape\">endShape()</a> will stop adding vertices to the\nshape. Each shape will be outlined with the current stroke color and filled\nwith the current fill color.\n\nTransformations such as <a href=\"#/p5/translate\">translate()</a>,\n<a href=\"#/p5/rotate\">rotate()</a>, and\n<a href=\"#/p5/scale\">scale()</a> don't work between `beginShape()` and\n<a href=\"#/p5/endShape\">endShape()</a>. It's also not possible to use\nother shapes, such as <a href=\"#/p5/ellipse\">ellipse()</a> or\n<a href=\"#/p5/rect\">rect()</a>, between `beginShape()` and\n<a href=\"#/p5/endShape\">endShape()</a>.","memberof":"module:Shape","params":[{"type":{"names":["Constant"]},"optional":true,"description":"either POINTS, LINES, TRIANGLES, TRIANGLE_FAN\n                               TRIANGLE_STRIP, QUADS, QUAD_STRIP or TESS.","name":"kind"}],"examples":["<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Start drawing the shape.\n  beginShape();\n\n  // Add vertices.\n  vertex(30, 20);\n  vertex(85, 20);\n  vertex(85, 75);\n  vertex(30, 75);\n\n  // Stop drawing the shape.\n  endShape(CLOSE);\n\n  describe('A white square on a gray background.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Start drawing the shape.\n  // Only draw the vertices (points).\n  beginShape(POINTS);\n\n  // Add vertices.\n  vertex(30, 20);\n  vertex(85, 20);\n  vertex(85, 75);\n  vertex(30, 75);\n\n  // Stop drawing the shape.\n  endShape();\n\n  describe('Four black dots that form a square are drawn on a gray background.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Start drawing the shape.\n  // Only draw lines between alternating pairs of vertices.\n  beginShape(LINES);\n\n  // Add vertices.\n  vertex(30, 20);\n  vertex(85, 20);\n  vertex(85, 75);\n  vertex(30, 75);\n\n  // Stop drawing the shape.\n  endShape();\n\n  describe('Two horizontal black lines on a gray background.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Style the shape.\n  noFill();\n\n  // Start drawing the shape.\n  beginShape();\n\n  // Add vertices.\n  vertex(30, 20);\n  vertex(85, 20);\n  vertex(85, 75);\n  vertex(30, 75);\n\n  // Stop drawing the shape.\n  endShape();\n\n  describe('Three black lines form a sideways U shape on a gray background.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Style the shape.\n  noFill();\n\n  // Start drawing the shape.\n  beginShape();\n\n  // Add vertices.\n  vertex(30, 20);\n  vertex(85, 20);\n  vertex(85, 75);\n  vertex(30, 75);\n\n  // Stop drawing the shape.\n  // Connect the first and last vertices.\n  endShape(CLOSE);\n\n  describe('A black outline of a square drawn on a gray background.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Start drawing the shape.\n  // Draw a series of triangles.\n  beginShape(TRIANGLES);\n\n  // Left triangle.\n  vertex(30, 75);\n  vertex(40, 20);\n  vertex(50, 75);\n\n  // Right triangle.\n  vertex(60, 20);\n  vertex(70, 75);\n  vertex(80, 20);\n\n  // Stop drawing the shape.\n  endShape();\n\n  describe('Two white triangles drawn on a gray background.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Start drawing the shape.\n  // Draw a series of triangles.\n  beginShape(TRIANGLE_STRIP);\n\n  // Add vertices.\n  vertex(30, 75);\n  vertex(40, 20);\n  vertex(50, 75);\n  vertex(60, 20);\n  vertex(70, 75);\n  vertex(80, 20);\n  vertex(90, 75);\n\n  // Stop drawing the shape.\n  endShape();\n\n  describe('Five white triangles that are interleaved drawn on a gray background.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Start drawing the shape.\n  // Draw a series of triangles that share their first vertex.\n  beginShape(TRIANGLE_FAN);\n\n  // Add vertices.\n  vertex(57.5, 50);\n  vertex(57.5, 15);\n  vertex(92, 50);\n  vertex(57.5, 85);\n  vertex(22, 50);\n  vertex(57.5, 15);\n\n  // Stop drawing the shape.\n  endShape();\n\n  describe('Four white triangles form a square are drawn on a gray background.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Start drawing the shape.\n  // Draw a series of quadrilaterals.\n  beginShape(QUADS);\n\n  // Left rectangle.\n  vertex(30, 20);\n  vertex(30, 75);\n  vertex(50, 75);\n  vertex(50, 20);\n\n  // Right rectangle.\n  vertex(65, 20);\n  vertex(65, 75);\n  vertex(85, 75);\n  vertex(85, 20);\n\n  // Stop drawing the shape.\n  endShape();\n\n  describe('Two white rectangles drawn on a gray background.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Start drawing the shape.\n  // Draw a series of quadrilaterals.\n  beginShape(QUAD_STRIP);\n\n  // Add vertices.\n  vertex(30, 20);\n  vertex(30, 75);\n  vertex(50, 20);\n  vertex(50, 75);\n  vertex(65, 20);\n  vertex(65, 75);\n  vertex(85, 20);\n  vertex(85, 75);\n\n  // Stop drawing the shape.\n  endShape();\n\n  describe('Three white rectangles that share edges are drawn on a gray background.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  background(200);\n\n  // Start drawing the shape.\n  // Draw a series of quadrilaterals.\n  beginShape(TESS);\n\n  // Add the vertices.\n  vertex(-30, -30, 0);\n  vertex(30, -30, 0);\n  vertex(30, -10, 0);\n  vertex(-10, -10, 0);\n  vertex(-10, 10, 0);\n  vertex(30, 10, 0);\n  vertex(30, 30, 0);\n  vertex(-30, 30, 0);\n\n  // Stop drawing the shape.\n  // Connect the first and last vertices.\n  endShape(CLOSE);\n\n  describe('A blocky C shape drawn in white on a gray background.');\n}\n</code>\n</div>\n\n<div>\n<code>\n// Click and drag with the mouse to view the scene from different angles.\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe('A blocky C shape drawn in red, blue, and green on a gray background.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Enable orbiting with the mouse.\n  orbitControl();\n\n  // Start drawing the shape.\n  // Draw a series of quadrilaterals.\n  beginShape(TESS);\n\n  // Add the vertices.\n  fill('red');\n  stroke('red');\n  vertex(-30, -30, 0);\n  vertex(30, -30, 0);\n  vertex(30, -10, 0);\n  fill('green');\n  stroke('green');\n  vertex(-10, -10, 0);\n  vertex(-10, 10, 0);\n  vertex(30, 10, 0);\n  fill('blue');\n  stroke('blue');\n  vertex(30, 30, 0);\n  vertex(-30, 30, 0);\n\n  // Stop drawing the shape.\n  // Connect the first and last vertices.\n  endShape(CLOSE);\n}\n</code>\n</div>"],"chainable":true,"meta":{"lineno":129,"filename":"vertex.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":2},{"id":"module:Shape~bezierVertex","longname":"module:Shape~bezierVertex","name":"bezierVertex","kind":"function","scope":"inner","description":"Adds a Bézier curve segment to a custom shape.\n\n`bezierVertex()` adds a curved segment to custom shapes. The Bézier curves\nit creates are defined like those made by the\n<a href=\"#/p5/bezier\">bezier()</a> function. `bezierVertex()` must be\ncalled between the\n<a href=\"#/p5/beginShape\">beginShape()</a> and\n<a href=\"#/p5/endShape\">endShape()</a> functions. The curved segment uses\nthe previous vertex as the first anchor point, so there must be at least\none call to <a href=\"#/p5/vertex\">vertex()</a> before `bezierVertex()` can\nbe used.\n\nThe first four parameters, `x2`, `y2`, `x3`, and `y3`, set the curve’s two\ncontrol points. The control points \"pull\" the curve towards them.\n\nThe fifth and sixth parameters, `x4`, and `y4`, set the last anchor point.\nThe last anchor point is where the curve ends.\n\nBézier curves can also be drawn in 3D using WebGL mode. The 3D version of\n`bezierVertex()` has eight arguments because each point has x-, y-, and\nz-coordinates.\n\nNote: `bezierVertex()` won’t work when an argument is passed to\n<a href=\"#/p5/beginShape\">beginShape()</a>.","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"description":"x-coordinate of the first control point.","name":"x2"},{"type":{"names":["Number"]},"description":"y-coordinate of the first control point.","name":"y2"},{"type":{"names":["Number"]},"description":"x-coordinate of the second control point.","name":"x3"},{"type":{"names":["Number"]},"description":"y-coordinate of the second control point.","name":"y3"},{"type":{"names":["Number"]},"description":"x-coordinate of the anchor point.","name":"x4"},{"type":{"names":["Number"]},"description":"y-coordinate of the anchor point.","name":"y4"}],"examples":["<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Style the shape.\n  noFill();\n\n  // Start drawing the shape.\n  beginShape();\n\n  // Add the first anchor point.\n  vertex(30, 20);\n\n  // Add the Bézier vertex.\n  bezierVertex(80, 0, 80, 75, 30, 75);\n\n  // Stop drawing the shape.\n  endShape();\n\n  describe('A black C curve on a gray background.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Draw the anchor points in black.\n  stroke(0);\n  strokeWeight(5);\n  point(30, 20);\n  point(30, 75);\n\n  // Draw the control points in red.\n  stroke(255, 0, 0);\n  point(80, 0);\n  point(80, 75);\n\n  // Style the shape.\n  noFill();\n  stroke(0);\n  strokeWeight(1);\n\n  // Start drawing the shape.\n  beginShape();\n\n  // Add the first anchor point.\n  vertex(30, 20);\n\n  // Add the Bézier vertex.\n  bezierVertex(80, 0, 80, 75, 30, 75);\n\n  // Stop drawing the shape.\n  endShape();\n\n  // Draw red lines from the anchor points to the control points.\n  stroke(255, 0, 0);\n  line(30, 20, 80, 0);\n  line(30, 75, 80, 75);\n\n  describe(\n    'A gray square with three curves. A black curve has two straight, red lines that extend from its ends. The endpoints of all the curves are marked with dots.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\n// Click the mouse near the red dot in the top-right corner\n// and drag to change the curve's shape.\n\nlet x2 = 80;\nlet y2 = 0;\nlet isChanging = false;\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  describe(\n    'A gray square with three curves. A black curve has two straight, red lines that extend from its ends. The endpoints of all the curves are marked with dots.'\n  );\n}\n\nfunction draw() {\n  background(200);\n\n  // Draw the anchor points in black.\n  stroke(0);\n  strokeWeight(5);\n  point(30, 20);\n  point(30, 75);\n\n  // Draw the control points in red.\n  stroke(255, 0, 0);\n  point(x2, y2);\n  point(80, 75);\n\n  // Style the shape.\n  noFill();\n  stroke(0);\n  strokeWeight(1);\n\n  // Start drawing the shape.\n  beginShape();\n\n  // Add the first anchor point.\n  vertex(30, 20);\n\n  // Add the Bézier vertex.\n  bezierVertex(x2, y2, 80, 75, 30, 75);\n\n  // Stop drawing the shape.\n  endShape();\n\n  // Draw red lines from the anchor points to the control points.\n  stroke(255, 0, 0);\n  line(30, 20, x2, y2);\n  line(30, 75, 80, 75);\n}\n\n// Start changing the first control point if the user clicks near it.\nfunction mousePressed() {\n  if (dist(mouseX, mouseY, x2, y2) < 20) {\n    isChanging = true;\n  }\n}\n\n// Stop changing the first control point when the user releases the mouse.\nfunction mouseReleased() {\n  isChanging = false;\n}\n\n// Update the first control point while the user drags the mouse.\nfunction mouseDragged() {\n  if (isChanging === true) {\n    x2 = mouseX;\n    y2 = mouseY;\n  }\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Start drawing the shape.\n  beginShape();\n\n  // Add the first anchor point.\n  vertex(30, 20);\n\n  // Add the Bézier vertices.\n  bezierVertex(80, 0, 80, 75, 30, 75);\n  bezierVertex(50, 80, 60, 25, 30, 20);\n\n  // Stop drawing the shape.\n  endShape();\n\n  describe('A crescent moon shape drawn in white on a gray background.');\n}\n</code>\n</div>\n\n<div>\n<code>\n// Click and drag the mouse to view the scene from different angles.\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe('A crescent moon shape drawn in white on a blue background. When the user drags the mouse, the scene rotates and a second moon is revealed.');\n}\n\nfunction draw() {\n  background('midnightblue');\n\n  // Enable orbiting with the mouse.\n  orbitControl();\n\n  // Style the moons.\n  noStroke();\n  fill('lemonchiffon');\n\n  // Draw the first moon.\n  beginShape();\n  vertex(-20, -30, 0);\n  bezierVertex(30, -50, 0, 30, 25, 0, -20, 25, 0);\n  bezierVertex(0, 30, 0, 10, -25, 0, -20, -30, 0);\n  endShape();\n\n  // Draw the second moon.\n  beginShape();\n  vertex(-20, -30, -20);\n  bezierVertex(30, -50, -20, 30, 25, -20, -20, 25, -20);\n  bezierVertex(0, 30, -20, 10, -25, -20, -20, -30, -20);\n  endShape();\n}\n</code>\n</div>"],"chainable":true,"meta":{"lineno":543,"filename":"vertex.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":3},{"id":"module:Shape~bezierVertex","longname":"module:Shape~bezierVertex","name":"bezierVertex","kind":"function","scope":"inner","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"name":"x2"},{"type":{"names":["Number"]},"name":"y2"},{"type":{"names":["Number"]},"description":"z-coordinate of the first control point.","name":"z2"},{"type":{"names":["Number"]},"name":"x3"},{"type":{"names":["Number"]},"name":"y3"},{"type":{"names":["Number"]},"description":"z-coordinate of the second control point.","name":"z3"},{"type":{"names":["Number"]},"name":"x4"},{"type":{"names":["Number"]},"name":"y4"},{"type":{"names":["Number"]},"description":"z-coordinate of the anchor point.","name":"z4"}],"chainable":true,"meta":{"lineno":792,"filename":"vertex.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":4},{"id":"module:Shape~curveVertex","longname":"module:Shape~curveVertex","name":"curveVertex","kind":"function","scope":"inner","description":"Adds a spline curve segment to a custom shape.\n\n`curveVertex()` adds a curved segment to custom shapes. The spline curves\nit creates are defined like those made by the\n<a href=\"#/p5/curve\">curve()</a> function. `curveVertex()` must be called\nbetween the <a href=\"#/p5/beginShape\">beginShape()</a> and\n<a href=\"#/p5/endShape\">endShape()</a> functions.\n\nSpline curves can form shapes and curves that slope gently. They’re like\ncables that are attached to a set of points. Splines are defined by two\nanchor points and two control points. `curveVertex()` must be called at\nleast four times between\n<a href=\"#/p5/beginShape\">beginShape()</a> and\n<a href=\"#/p5/endShape\">endShape()</a> in order to draw a curve:\n\n<code>\nbeginShape();\n\n// Add the first control point.\ncurveVertex(84, 91);\n\n// Add the anchor points to draw between.\ncurveVertex(68, 19);\ncurveVertex(21, 17);\n\n// Add the second control point.\ncurveVertex(32, 91);\n\nendShape();\n</code>\n\nThe code snippet above would only draw the curve between the anchor points,\nsimilar to the <a href=\"#/p5/curve\">curve()</a> function. The segments\nbetween the control and anchor points can be drawn by calling\n`curveVertex()` with the coordinates of the control points:\n\n<code>\nbeginShape();\n\n// Add the first control point and draw a segment to it.\ncurveVertex(84, 91);\ncurveVertex(84, 91);\n\n// Add the anchor points to draw between.\ncurveVertex(68, 19);\ncurveVertex(21, 17);\n\n// Add the second control point.\ncurveVertex(32, 91);\n\n// Uncomment the next line to draw the segment to the second control point.\n// curveVertex(32, 91);\n\nendShape();\n</code>\n\nThe first two parameters, `x` and `y`, set the vertex’s location. For\nexample, calling `curveVertex(10, 10)` adds a point to the curve at\n`(10, 10)`.\n\nSpline curves can also be drawn in 3D using WebGL mode. The 3D version of\n`curveVertex()` has three arguments because each point has x-, y-, and\nz-coordinates. By default, the vertex’s z-coordinate is set to 0.\n\nNote: `curveVertex()` won’t work when an argument is passed to\n<a href=\"#/p5/beginShape\">beginShape()</a>.","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"description":"x-coordinate of the vertex","name":"x"},{"type":{"names":["Number"]},"description":"y-coordinate of the vertex","name":"y"}],"examples":["<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Style the shape.\n  noFill();\n  strokeWeight(1);\n\n  // Start drawing the shape.\n  beginShape();\n\n  // Add the first control point.\n  curveVertex(32, 91);\n\n  // Add the anchor points.\n  curveVertex(21, 17);\n  curveVertex(68, 19);\n\n  // Add the second control point.\n  curveVertex(84, 91);\n\n  // Stop drawing the shape.\n  endShape();\n\n  // Style the anchor and control points.\n  strokeWeight(5);\n\n  // Draw the anchor points in black.\n  stroke(0);\n  point(21, 17);\n  point(68, 19);\n\n  // Draw the control points in red.\n  stroke(255, 0, 0);\n  point(32, 91);\n  point(84, 91);\n\n  describe(\n    'A black curve drawn on a gray background. The curve has black dots at its ends. Two red dots appear near the bottom of the canvas.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Style the shape.\n  noFill();\n  strokeWeight(1);\n\n  // Start drawing the shape.\n  beginShape();\n\n  // Add the first control point and draw a segment to it.\n  curveVertex(32, 91);\n  curveVertex(32, 91);\n\n  // Add the anchor points.\n  curveVertex(21, 17);\n  curveVertex(68, 19);\n\n  // Add the second control point.\n  curveVertex(84, 91);\n\n  // Stop drawing the shape.\n  endShape();\n\n  // Style the anchor and control points.\n  strokeWeight(5);\n\n  // Draw the anchor points in black.\n  stroke(0);\n  point(21, 17);\n  point(68, 19);\n\n  // Draw the control points in red.\n  stroke(255, 0, 0);\n  point(32, 91);\n  point(84, 91);\n\n  describe(\n    'A black curve drawn on a gray background. The curve passes through one red dot and two black dots. Another red dot appears near the bottom of the canvas.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Style the shape.\n  noFill();\n  strokeWeight(1);\n\n  // Start drawing the shape.\n  beginShape();\n\n  // Add the first control point and draw a segment to it.\n  curveVertex(32, 91);\n  curveVertex(32, 91);\n\n  // Add the anchor points.\n  curveVertex(21, 17);\n  curveVertex(68, 19);\n\n  // Add the second control point and draw a segment to it.\n  curveVertex(84, 91);\n  curveVertex(84, 91);\n\n  // Stop drawing the shape.\n  endShape();\n\n  // Style the anchor and control points.\n  strokeWeight(5);\n\n  // Draw the anchor points in black.\n  stroke(0);\n  point(21, 17);\n  point(68, 19);\n\n  // Draw the control points in red.\n  stroke(255, 0, 0);\n  point(32, 91);\n  point(84, 91);\n\n  describe(\n    'A black U curve drawn upside down on a gray background. The curve passes from one red dot through two black dots and ends at another red dot.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\n// Click the mouse near the red dot in the bottom-left corner\n// and drag to change the curve's shape.\n\nlet x1 = 32;\nlet y1 = 91;\nlet isChanging = false;\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  describe(\n    'A black U curve drawn upside down on a gray background. The curve passes from one red dot through two black dots and ends at another red dot.'\n  );\n}\n\nfunction draw() {\n  background(200);\n\n  // Style the shape.\n  noFill();\n  stroke(0);\n  strokeWeight(1);\n\n  // Start drawing the shape.\n  beginShape();\n\n  // Add the first control point and draw a segment to it.\n  curveVertex(x1, y1);\n  curveVertex(x1, y1);\n\n  // Add the anchor points.\n  curveVertex(21, 17);\n  curveVertex(68, 19);\n\n  // Add the second control point and draw a segment to it.\n  curveVertex(84, 91);\n  curveVertex(84, 91);\n\n  // Stop drawing the shape.\n  endShape();\n\n  // Style the anchor and control points.\n  strokeWeight(5);\n\n  // Draw the anchor points in black.\n  stroke(0);\n  point(21, 17);\n  point(68, 19);\n\n  // Draw the control points in red.\n  stroke(255, 0, 0);\n  point(x1, y1);\n  point(84, 91);\n}\n\n// Start changing the first control point if the user clicks near it.\nfunction mousePressed() {\n  if (dist(mouseX, mouseY, x1, y1) < 20) {\n    isChanging = true;\n  }\n}\n\n// Stop changing the first control point when the user releases the mouse.\nfunction mouseReleased() {\n  isChanging = false;\n}\n\n// Update the first control point while the user drags the mouse.\nfunction mouseDragged() {\n  if (isChanging === true) {\n    x1 = mouseX;\n    y1 = mouseY;\n  }\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Start drawing the shape.\n  beginShape();\n\n  // Add the first control point and draw a segment to it.\n  curveVertex(32, 91);\n  curveVertex(32, 91);\n\n  // Add the anchor points.\n  curveVertex(21, 17);\n  curveVertex(68, 19);\n\n  // Add the second control point.\n  curveVertex(84, 91);\n  curveVertex(84, 91);\n\n  // Stop drawing the shape.\n  endShape();\n\n  describe('A ghost shape drawn in white on a gray background.');\n}\n</code>\n</div>"],"chainable":true,"meta":{"lineno":832,"filename":"vertex.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":5},{"id":"module:Shape~curveVertex","longname":"module:Shape~curveVertex","name":"curveVertex","kind":"function","scope":"inner","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"name":"x"},{"type":{"names":["Number"]},"name":"y"},{"type":{"names":["Number"]},"optional":true,"description":"z-coordinate of the vertex.","name":"z"}],"examples":["<div>\n<code>\n// Click and drag the mouse to view the scene from different angles.\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe('A ghost shape drawn in white on a blue background. When the user drags the mouse, the scene rotates to reveal the outline of a second ghost.');\n}\n\nfunction draw() {\n  background('midnightblue');\n\n  // Enable orbiting with the mouse.\n  orbitControl();\n\n  // Draw the first ghost.\n  noStroke();\n  fill('ghostwhite');\n\n  beginShape();\n  curveVertex(-28, 41, 0);\n  curveVertex(-28, 41, 0);\n  curveVertex(-29, -33, 0);\n  curveVertex(18, -31, 0);\n  curveVertex(34, 41, 0);\n  curveVertex(34, 41, 0);\n  endShape();\n\n  // Draw the second ghost.\n  noFill();\n  stroke('ghostwhite');\n\n  beginShape();\n  curveVertex(-28, 41, -20);\n  curveVertex(-28, 41, -20);\n  curveVertex(-29, -33, -20);\n  curveVertex(18, -31, -20);\n  curveVertex(34, 41, -20);\n  curveVertex(34, 41, -20);\n  endShape();\n}\n</code>\n</div>"],"chainable":true,"meta":{"lineno":1160,"filename":"vertex.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":6},{"id":"module:Shape~endContour","longname":"module:Shape~endContour","name":"endContour","kind":"function","scope":"inner","description":"Stops creating a hole within a flat shape.\n\nThe <a href=\"#/p5/beginContour\">beginContour()</a> and `endContour()`\nfunctions allow for creating negative space within custom shapes that are\nflat. <a href=\"#/p5/beginContour\">beginContour()</a> begins adding vertices\nto a negative space and `endContour()` stops adding them.\n<a href=\"#/p5/beginContour\">beginContour()</a> and `endContour()` must be\ncalled between <a href=\"#/p5/beginShape\">beginShape()</a> and\n<a href=\"#/p5/endShape\">endShape()</a>.\n\nTransformations such as <a href=\"#/p5/translate\">translate()</a>,\n<a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a>\ndon't work between <a href=\"#/p5/beginContour\">beginContour()</a> and\n`endContour()`. It's also not possible to use other shapes, such as\n<a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a>,\nbetween <a href=\"#/p5/beginContour\">beginContour()</a> and `endContour()`.\n\nNote: The vertices that define a negative space must \"wind\" in the opposite\ndirection from the outer shape. First, draw vertices for the outer shape\nclockwise order. Then, draw vertices for the negative space in\ncounter-clockwise order.","memberof":"module:Shape","examples":["<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Start drawing the shape.\n  beginShape();\n\n  // Exterior vertices, clockwise winding.\n  vertex(10, 10);\n  vertex(90, 10);\n  vertex(90, 90);\n  vertex(10, 90);\n\n  // Interior vertices, counter-clockwise winding.\n  beginContour();\n  vertex(30, 30);\n  vertex(30, 70);\n  vertex(70, 70);\n  vertex(70, 30);\n  endContour();\n\n  // Stop drawing the shape.\n  endShape(CLOSE);\n\n  describe('A white square with a square hole in its center drawn on a gray background.');\n}\n</code>\n</div>\n\n<div>\n<code>\n// Click and drag the mouse to view the scene from different angles.\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe('A white square with a square hole in its center drawn on a gray background.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Enable orbiting with the mouse.\n  orbitControl();\n\n  // Start drawing the shape.\n  beginShape();\n\n  // Exterior vertices, clockwise winding.\n  vertex(-40, -40);\n  vertex(40, -40);\n  vertex(40, 40);\n  vertex(-40, 40);\n\n  // Interior vertices, counter-clockwise winding.\n  beginContour();\n  vertex(-20, -20);\n  vertex(-20, 20);\n  vertex(20, 20);\n  vertex(20, -20);\n  endContour();\n\n  // Stop drawing the shape.\n  endShape(CLOSE);\n}\n</code>\n</div>"],"chainable":true,"meta":{"lineno":1224,"filename":"vertex.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":7},{"id":"module:Shape~endShape","longname":"module:Shape~endShape","name":"endShape","kind":"function","scope":"inner","description":"Begins adding vertices to a custom shape.\n\nThe <a href=\"#/p5/beginShape\">beginShape()</a> and `endShape()` functions\nallow for creating custom shapes in 2D or 3D.\n<a href=\"#/p5/beginShape\">beginShape()</a> begins adding vertices to a\ncustom shape and `endShape()` stops adding them.\n\nThe first parameter, `mode`, is optional. By default, the first and last\nvertices of a shape aren't connected. If the constant `CLOSE` is passed, as\nin `endShape(CLOSE)`, then the first and last vertices will be connected.\n\nThe second parameter, `count`, is also optional. In WebGL mode, it’s more\nefficient to draw many copies of the same shape using a technique called\n<a href=\"https://webglfundamentals.org/webgl/lessons/webgl-instanced-drawing.html\" target=\"_blank\">instancing</a>.\nThe `count` parameter tells WebGL mode how many copies to draw. For\nexample, calling `endShape(CLOSE, 400)` after drawing a custom shape will\nmake it efficient to draw 400 copies. This feature requires\n<a href=\"https://p5js.org/learn/getting-started-in-webgl-shaders.html\" target=\"_blank\">writing a custom shader</a>.\n\nAfter calling <a href=\"#/p5/beginShape\">beginShape()</a>, shapes can be\nbuilt by calling <a href=\"#/p5/vertex\">vertex()</a>,\n<a href=\"#/p5/bezierVertex\">bezierVertex()</a>,\n<a href=\"#/p5/quadraticVertex\">quadraticVertex()</a>, and/or\n<a href=\"#/p5/curveVertex\">curveVertex()</a>. Calling\n`endShape()` will stop adding vertices to the\nshape. Each shape will be outlined with the current stroke color and filled\nwith the current fill color.\n\nTransformations such as <a href=\"#/p5/translate\">translate()</a>,\n<a href=\"#/p5/rotate\">rotate()</a>, and\n<a href=\"#/p5/scale\">scale()</a> don't work between\n<a href=\"#/p5/beginShape\">beginShape()</a> and `endShape()`. It's also not\npossible to use other shapes, such as <a href=\"#/p5/ellipse\">ellipse()</a> or\n<a href=\"#/p5/rect\">rect()</a>, between\n<a href=\"#/p5/beginShape\">beginShape()</a> and `endShape()`.","memberof":"module:Shape","params":[{"type":{"names":["Constant"]},"optional":true,"description":"use CLOSE to close the shape","name":"mode"},{"type":{"names":["Integer"]},"optional":true,"description":"number of times you want to draw/instance the shape (for WebGL mode).","name":"count"}],"examples":["<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Style the shapes.\n  noFill();\n\n  // Left triangle.\n  beginShape();\n  vertex(20, 20);\n  vertex(45, 20);\n  vertex(45, 80);\n  endShape(CLOSE);\n\n  // Right triangle.\n  beginShape();\n  vertex(50, 20);\n  vertex(75, 20);\n  vertex(75, 80);\n  endShape();\n\n  describe(\n    'Two sets of black lines drawn on a gray background. The three lines on the left form a right triangle. The two lines on the right form a right angle.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\n// Note: A \"uniform\" is a global variable within a shader program.\n\n// Create a string with the vertex shader program.\n// The vertex shader is called for each vertex.\nlet vertSrc = `#version 300 es\n\nprecision mediump float;\n\nin vec3 aPosition;\nflat out int instanceID;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nvoid main() {\n\n  // Copy the instance ID to the fragment shader.\n  instanceID = gl_InstanceID;\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n\n  // gl_InstanceID represents a numeric value for each instance.\n  // Using gl_InstanceID allows us to move each instance separately.\n  // Here we move each instance horizontally by ID * 23.\n  float xOffset = float(gl_InstanceID) * 23.0;\n\n  // Apply the offset to the final position.\n  gl_Position = uProjectionMatrix * uModelViewMatrix * (positionVec4 -\n    vec4(xOffset, 0.0, 0.0, 0.0));\n}\n`;\n\n// Create a string with the fragment shader program.\n// The fragment shader is called for each pixel.\nlet fragSrc = `#version 300 es\n\nprecision mediump float;\n\nout vec4 outColor;\nflat in int instanceID;\nuniform float numInstances;\n\nvoid main() {\n  vec4 red = vec4(1.0, 0.0, 0.0, 1.0);\n  vec4 blue = vec4(0.0, 0.0, 1.0, 1.0);\n\n  // Normalize the instance ID.\n  float normId = float(instanceID) / numInstances;\n\n  // Mix between two colors using the normalized instance ID.\n  outColor = mix(red, blue, normId);\n}\n`;\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  // Create a p5.Shader object.\n  let myShader = createShader(vertSrc, fragSrc);\n\n  background(220);\n\n  // Compile and apply the p5.Shader.\n  shader(myShader);\n\n  // Set the numInstances uniform.\n  myShader.setUniform('numInstances', 4);\n\n  // Translate the origin to help align the drawing.\n  translate(25, -10);\n\n  // Style the shapes.\n  noStroke();\n\n  // Draw the shapes.\n  beginShape();\n  vertex(0, 0);\n  vertex(0, 20);\n  vertex(20, 20);\n  vertex(20, 0);\n  vertex(0, 0);\n  endShape(CLOSE, 4);\n\n  describe('A row of four squares. Their colors transition from purple on the left to red on the right');\n}\n</code>\n</div>"],"chainable":true,"meta":{"lineno":1344,"filename":"vertex.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":8},{"id":"module:Shape~quadraticVertex","longname":"module:Shape~quadraticVertex","name":"quadraticVertex","kind":"function","scope":"inner","description":"Adds a quadratic Bézier curve segment to a custom shape.\n\n`quadraticVertex()` adds a curved segment to custom shapes. The Bézier\ncurve segments it creates are similar to those made by the\n<a href=\"#/p5/bezierVertex\">bezierVertex()</a> function.\n`quadraticVertex()` must be called between the\n<a href=\"#/p5/beginShape\">beginShape()</a> and\n<a href=\"#/p5/endShape\">endShape()</a> functions. The curved segment uses\nthe previous vertex as the first anchor point, so there must be at least\none call to <a href=\"#/p5/vertex\">vertex()</a> before `quadraticVertex()` can\nbe used.\n\nThe first two parameters, `cx` and `cy`, set the curve’s control point.\nThe control point \"pulls\" the curve towards its.\n\nThe last two parameters, `x3`, and `y3`, set the last anchor point. The\nlast anchor point is where the curve ends.\n\nBézier curves can also be drawn in 3D using WebGL mode. The 3D version of\n`bezierVertex()` has eight arguments because each point has x-, y-, and\nz-coordinates.\n\nNote: `quadraticVertex()` won’t work when an argument is passed to\n<a href=\"#/p5/beginShape\">beginShape()</a>.","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"description":"x-coordinate of the control point.","name":"cx"},{"type":{"names":["Number"]},"description":"y-coordinate of the control point.","name":"cy"},{"type":{"names":["Number"]},"description":"x-coordinate of the anchor point.","name":"x3"},{"type":{"names":["Number"]},"description":"y-coordinate of the anchor point.","name":"y3"}],"examples":["<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Style the curve.\n  noFill();\n\n  // Draw the curve.\n  beginShape();\n  vertex(20, 20);\n  quadraticVertex(80, 20, 50, 50);\n  endShape();\n\n  describe('A black curve drawn on a gray square. The curve starts at the top-left corner and ends at the center.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Draw the curve.\n  noFill();\n  beginShape();\n  vertex(20, 20);\n  quadraticVertex(80, 20, 50, 50);\n  endShape();\n\n  // Draw red lines from the anchor points to the control point.\n  stroke(255, 0, 0);\n  line(20, 20, 80, 20);\n  line(50, 50, 80, 20);\n\n  // Draw the anchor points in black.\n  strokeWeight(5);\n  stroke(0);\n  point(20, 20);\n  point(50, 50);\n\n  // Draw the control point in red.\n  stroke(255, 0, 0);\n  point(80, 20);\n\n  describe('A black curve that starts at the top-left corner and ends at the center. Its anchor and control points are marked with dots. Red lines connect both anchor points to the control point.');\n}\n</code>\n</div>\n\n<div>\n<code>\n// Click the mouse near the red dot in the top-right corner\n// and drag to change the curve's shape.\n\nlet x2 = 80;\nlet y2 = 20;\nlet isChanging = false;\n\nfunction setup() {\n  createCanvas(100, 100);\n\n  describe('A black curve that starts at the top-left corner and ends at the center. Its anchor and control points are marked with dots. Red lines connect both anchor points to the control point.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Style the curve.\n  noFill();\n  strokeWeight(1);\n  stroke(0);\n\n  // Draw the curve.\n  beginShape();\n  vertex(20, 20);\n  quadraticVertex(x2, y2, 50, 50);\n  endShape();\n\n  // Draw red lines from the anchor points to the control point.\n  stroke(255, 0, 0);\n  line(20, 20, x2, y2);\n  line(50, 50, x2, y2);\n\n  // Draw the anchor points in black.\n  strokeWeight(5);\n  stroke(0);\n  point(20, 20);\n  point(50, 50);\n\n  // Draw the control point in red.\n  stroke(255, 0, 0);\n  point(x2, y2);\n}\n\n// Start changing the first control point if the user clicks near it.\nfunction mousePressed() {\n  if (dist(mouseX, mouseY, x2, y2) < 20) {\n    isChanging = true;\n  }\n}\n\n// Stop changing the first control point when the user releases the mouse.\nfunction mouseReleased() {\n  isChanging = false;\n}\n\n// Update the first control point while the user drags the mouse.\nfunction mouseDragged() {\n  if (isChanging === true) {\n    x2 = mouseX;\n    y2 = mouseY;\n  }\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Start drawing the shape.\n  beginShape();\n\n  // Add the curved segments.\n  vertex(20, 20);\n  quadraticVertex(80, 20, 50, 50);\n  quadraticVertex(20, 80, 80, 80);\n\n  // Add the straight segments.\n  vertex(80, 10);\n  vertex(20, 10);\n  vertex(20, 20);\n\n  // Stop drawing the shape.\n  endShape();\n\n  describe('A white puzzle piece drawn on a gray background.');\n}\n</code>\n</div>\n\n<div>\n<code>\n// Click the and drag the mouse to view the scene from a different angle.\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe('A white puzzle piece on a dark gray background. When the user clicks and drags the scene, the outline of a second puzzle piece is revealed.');\n}\n\nfunction draw() {\n  background(50);\n\n  // Enable orbiting with the mouse.\n  orbitControl();\n\n  // Style the first puzzle piece.\n  noStroke();\n  fill(255);\n\n  // Draw the first puzzle piece.\n  beginShape();\n  vertex(-30, -30, 0);\n  quadraticVertex(30, -30, 0, 0, 0, 0);\n  quadraticVertex(-30, 30, 0, 30, 30, 0);\n  vertex(30, -40, 0);\n  vertex(-30, -40, 0);\n  vertex(-30, -30, 0);\n  endShape();\n\n  // Style the second puzzle piece.\n  stroke(255);\n  noFill();\n\n  // Draw the second puzzle piece.\n  beginShape();\n  vertex(-30, -30, -20);\n  quadraticVertex(30, -30, -20, 0, 0, -20);\n  quadraticVertex(-30, 30, -20, 30, 30, -20);\n  vertex(30, -40, -20);\n  vertex(-30, -40, -20);\n  vertex(-30, -30, -20);\n  endShape();\n}\n</code>\n</div>"],"chainable":true,"meta":{"lineno":1569,"filename":"vertex.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":9},{"id":"module:Shape~quadraticVertex","longname":"module:Shape~quadraticVertex","name":"quadraticVertex","kind":"function","scope":"inner","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"name":"cx"},{"type":{"names":["Number"]},"name":"cy"},{"type":{"names":["Number"]},"description":"z-coordinate of the control point.","name":"cz"},{"type":{"names":["Number"]},"name":"x3"},{"type":{"names":["Number"]},"name":"y3"},{"type":{"names":["Number"]},"description":"z-coordinate of the anchor point.","name":"z3"}],"meta":{"lineno":1801,"filename":"vertex.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":10},{"id":"module:Shape~vertex","longname":"module:Shape~vertex","name":"vertex","kind":"function","scope":"inner","description":"Adds a vertex to a custom shape.\n\n`vertex()` sets the coordinates of vertices drawn between the\n<a href=\"#/p5/beginShape\">beginShape()</a> and\n<a href=\"#/p5/endShape\">endShape()</a> functions.\n\nThe first two parameters, `x` and `y`, set the x- and y-coordinates of the\nvertex.\n\nThe third parameter, `z`, is optional. It sets the z-coordinate of the\nvertex in WebGL mode. By default, `z` is 0.\n\nThe fourth and fifth parameters, `u` and `v`, are also optional. They set\nthe u- and v-coordinates for the vertex’s texture when used with\n<a href=\"#/p5/endShape\">endShape()</a>. By default, `u` and `v` are both 0.","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"description":"x-coordinate of the vertex.","name":"x"},{"type":{"names":["Number"]},"description":"y-coordinate of the vertex.","name":"y"}],"examples":["<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Style the shape.\n  strokeWeight(3);\n\n  // Start drawing the shape.\n  // Only draw the vertices.\n  beginShape(POINTS);\n\n  // Add the vertices.\n  vertex(30, 20);\n  vertex(85, 20);\n  vertex(85, 75);\n  vertex(30, 75);\n\n  // Stop drawing the shape.\n  endShape();\n\n  describe('Four black dots that form a square are drawn on a gray background.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Start drawing the shape.\n  beginShape();\n\n  // Add vertices.\n  vertex(30, 20);\n  vertex(85, 20);\n  vertex(85, 75);\n  vertex(30, 75);\n\n  // Stop drawing the shape.\n  endShape(CLOSE);\n\n  describe('A white square on a gray background.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  background(200);\n\n  // Start drawing the shape.\n  beginShape();\n\n  // Add vertices.\n  vertex(-20, -30, 0);\n  vertex(35, -30, 0);\n  vertex(35, 25, 0);\n  vertex(-20, 25, 0);\n\n  // Stop drawing the shape.\n  endShape(CLOSE);\n\n  describe('A white square on a gray background.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe('A white square spins around slowly on a gray background.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Rotate around the y-axis.\n  rotateY(frameCount * 0.01);\n\n  // Start drawing the shape.\n  beginShape();\n\n  // Add vertices.\n  vertex(-20, -30, 0);\n  vertex(35, -30, 0);\n  vertex(35, 25, 0);\n  vertex(-20, 25, 0);\n\n  // Stop drawing the shape.\n  endShape(CLOSE);\n}\n</code>\n</div>\n\n<div>\n<code>\nlet img;\n\n// Load an image to apply as a texture.\nfunction preload() {\n  img = loadImage('assets/laDefense.jpg');\n}\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe('A photograph of a ceiling rotates slowly against a gray background.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Rotate around the y-axis.\n  rotateY(frameCount * 0.01);\n\n  // Style the shape.\n  noStroke();\n\n  // Apply the texture.\n  texture(img);\n  textureMode(NORMAL);\n\n  // Start drawing the shape\n  beginShape();\n\n  // Add vertices.\n  vertex(-20, -30, 0, 0, 0);\n  vertex(35, -30, 0, 1, 0);\n  vertex(35, 25, 0, 1, 1);\n  vertex(-20, 25, 0, 0, 1);\n\n  // Stop drawing the shape.\n  endShape();\n}\n</code>\n</div>"],"chainable":true,"meta":{"lineno":1850,"filename":"vertex.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":11},{"id":"module:Shape~vertex","longname":"module:Shape~vertex","name":"vertex","kind":"function","scope":"inner","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"name":"x"},{"type":{"names":["Number"]},"name":"y"},{"type":{"names":["Number"]},"optional":true,"description":"z-coordinate of the vertex. Defaults to 0.","name":"z"}],"chainable":true,"meta":{"lineno":2021,"filename":"vertex.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":12},{"id":"module:Shape~vertex","longname":"module:Shape~vertex","name":"vertex","kind":"function","scope":"inner","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"name":"x"},{"type":{"names":["Number"]},"name":"y"},{"type":{"names":["Number"]},"optional":true,"name":"z"},{"type":{"names":["Number"]},"optional":true,"description":"u-coordinate of the vertex's texture. Defaults to 0.","name":"u"},{"type":{"names":["Number"]},"optional":true,"description":"v-coordinate of the vertex's texture. Defaults to 0.","name":"v"}],"chainable":true,"meta":{"lineno":2028,"filename":"vertex.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":13},{"id":"module:Shape~normal","longname":"module:Shape~normal","name":"normal","kind":"function","scope":"inner","description":"Sets the normal vector for vertices in a custom 3D shape.\n\n3D shapes created with <a href=\"#/p5/beginShape\">beginShape()</a> and\n<a href=\"#/p5/endShape\">endShape()</a> are made by connecting sets of\npoints called vertices. Each vertex added with\n<a href=\"#/p5/vertex\">vertex()</a> has a normal vector that points away\nfrom it. The normal vector controls how light reflects off the shape.\n\n`normal()` can be called two ways with different parameters to define the\nnormal vector's components.\n\nThe first way to call `normal()` has three parameters, `x`, `y`, and `z`.\nIf `Number`s are passed, as in `normal(1, 2, 3)`, they set the x-, y-, and\nz-components of the normal vector.\n\nThe second way to call `normal()` has one parameter, `vector`. If a\n<a href=\"#/p5.Vector\">p5.Vector</a> object is passed, as in\n`normal(myVector)`, its components will be used to set the normal vector.\n\n`normal()` changes the normal vector of vertices added to a custom shape\nwith <a href=\"#/p5/vertex\">vertex()</a>. `normal()` must be called between\nthe <a href=\"#/p5/beginShape\">beginShape()</a> and\n<a href=\"#/p5/endShape\">endShape()</a> functions, just like\n<a href=\"#/p5/vertex\">vertex()</a>. The normal vector set by calling\n`normal()` will affect all following vertices until `normal()` is called\nagain:\n\n<code>\nbeginShape();\n\n// Set the vertex normal.\nnormal(-0.4, -0.4, 0.8);\n\n// Add a vertex.\nvertex(-30, -30, 0);\n\n// Set the vertex normal.\nnormal(0, 0, 1);\n\n// Add vertices.\nvertex(30, -30, 0);\nvertex(30, 30, 0);\n\n// Set the vertex normal.\nnormal(0.4, -0.4, 0.8);\n\n// Add a vertex.\nvertex(-30, 30, 0);\n\nendShape();\n</code>","memberof":"module:Shape","params":[{"type":{"names":["p5.Vector"]},"description":"vertex normal as a <a href=\"#/p5.Vector\">p5.Vector</a> object.","name":"vector"}],"examples":["<div>\n<code>\n// Click the and drag the mouse to view the scene from a different angle.\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe(\n    'A colorful square on a black background. The square changes color and rotates when the user drags the mouse. Parts of its surface reflect light in different directions.'\n  );\n}\n\nfunction draw() {\n  background(0);\n\n  // Enable orbiting with the mouse.\n  orbitControl();\n\n  // Style the shape.\n  normalMaterial();\n  noStroke();\n\n  // Draw the shape.\n  beginShape();\n  vertex(-30, -30, 0);\n  vertex(30, -30, 0);\n  vertex(30, 30, 0);\n  vertex(-30, 30, 0);\n  endShape();\n}\n</code>\n</div>\n\n<div>\n<code>\n// Click the and drag the mouse to view the scene from a different angle.\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe(\n    'A colorful square on a black background. The square changes color and rotates when the user drags the mouse. Parts of its surface reflect light in different directions.'\n  );\n}\n\nfunction draw() {\n  background(0);\n\n  // Enable orbiting with the mouse.\n  orbitControl();\n\n  // Style the shape.\n  normalMaterial();\n  noStroke();\n\n  // Draw the shape.\n  // Use normal() to set vertex normals.\n  beginShape();\n  normal(-0.4, -0.4, 0.8);\n  vertex(-30, -30, 0);\n\n  normal(0, 0, 1);\n  vertex(30, -30, 0);\n  vertex(30, 30, 0);\n\n  normal(0.4, -0.4, 0.8);\n  vertex(-30, 30, 0);\n  endShape();\n}\n</code>\n</div>\n\n<div class='notest'>\n<code>\n// Click the and drag the mouse to view the scene from a different angle.\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe(\n    'A colorful square on a black background. The square changes color and rotates when the user drags the mouse. Parts of its surface reflect light in different directions.'\n  );\n}\n\nfunction draw() {\n  background(0);\n\n  // Enable orbiting with the mouse.\n  orbitControl();\n\n  // Style the shape.\n  normalMaterial();\n  noStroke();\n\n  // Create p5.Vector objects.\n  let n1 = createVector(-0.4, -0.4, 0.8);\n  let n2 = createVector(0, 0, 1);\n  let n3 = createVector(0.4, -0.4, 0.8);\n\n  // Draw the shape.\n  // Use normal() to set vertex normals.\n  beginShape();\n  normal(n1);\n  vertex(-30, -30, 0);\n\n  normal(n2);\n  vertex(30, -30, 0);\n  vertex(30, 30, 0);\n\n  normal(n3);\n  vertex(-30, 30, 0);\n  endShape();\n}\n</code>\n</div>"],"chainable":true,"meta":{"lineno":2066,"filename":"vertex.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":14},{"id":"module:Shape~normal","longname":"module:Shape~normal","name":"normal","kind":"function","scope":"inner","memberof":"module:Shape","params":[{"type":{"names":["Number"]},"description":"x-component of the vertex normal.","name":"x"},{"type":{"names":["Number"]},"description":"y-component of the vertex normal.","name":"y"},{"type":{"names":["Number"]},"description":"z-component of the vertex normal.","name":"z"}],"chainable":true,"meta":{"lineno":2241,"filename":"vertex.js","path":"/home/orasund/gleam-playground/p5js_generator/input"},"order":15}]