[
  {
    "id": "module:Shape",
    "longname": "module:Shape",
    "name": "Shape",
    "kind": "module",
    "requires": [
      "module:core",
      "module:constants"
    ],
    "customTags": [
      {
        "tag": "submodule",
        "value": "2D Primitives"
      },
      {
        "tag": "for",
        "value": "p5"
      }
    ],
    "meta": {
      "lineno": 1,
      "filename": "2d_primitives.js",
      "path": "/home/orasund/gleam-playground/p5js_generator/input"
    },
    "order": 0
  },
  {
    "id": "module:Shape~p5#_normalizeArcAngles",
    "longname": "module:Shape~p5#_normalizeArcAngles",
    "name": "_normalizeArcAngles",
    "kind": "function",
    "scope": "instance",
    "description": "This function does 3 things:\n\n  1. Bounds the desired start/stop angles for an arc (in radians) so that:\n\n         0 <= start < TWO_PI ;    start <= stop < start + TWO_PI\n\n     This means that the arc rendering functions don't have to be concerned\n     with what happens if stop is smaller than start, or if the arc 'goes\n     round more than once', etc.: they can just start at start and increase\n     until stop and the correct arc will be drawn.\n\n  2. Optionally adjusts the angles within each quadrant to counter the naive\n     scaling of the underlying ellipse up from the unit circle.  Without\n     this, the angles become arbitrary when width != height: 45 degrees\n     might be drawn at 5 degrees on a 'wide' ellipse, or at 85 degrees on\n     a 'tall' ellipse.\n\n  3. Flags up when start and stop correspond to the same place on the\n     underlying ellipse.  This is useful if you want to do something special\n     there (like rendering a whole ellipse instead).",
    "memberof": "module:Shape~p5",
    "meta": {
      "lineno": 38,
      "filename": "2d_primitives.js",
      "path": "/home/orasund/gleam-playground/p5js_generator/input"
    },
    "order": 1
  },
  {
    "id": "module:Shape~arc",
    "longname": "module:Shape~arc",
    "name": "arc",
    "kind": "function",
    "scope": "inner",
    "description": "Draws an arc.\n\nAn arc is a section of an ellipse defined by the `x`, `y`, `w`, and\n`h` parameters. `x` and `y` set the location of the arc's center. `w` and\n`h` set the arc's width and height. See\n<a href=\"#/p5/ellipse\">ellipse()</a> and\n<a href=\"#/p5/ellipseMode\">ellipseMode()</a> for more details.\n\nThe fifth and sixth parameters, `start` and `stop`, set the angles\nbetween which to draw the arc. Arcs are always drawn clockwise from\n`start` to `stop`. Angles are always given in radians.\n\nThe seventh parameter, `mode`, is optional. It determines the arc's fill\nstyle. The fill modes are a semi-circle (`OPEN`), a closed semi-circle\n(`CHORD`), or a closed pie segment (`PIE`).\n\nThe eighth parameter, `detail`, is also optional. It determines how many\nvertices are used to draw the arc in WebGL mode. The default value is 25.",
    "memberof": "module:Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "x-coordinate of the arc's ellipse.",
        "name": "x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "y-coordinate of the arc's ellipse.",
        "name": "y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "width of the arc's ellipse by default.",
        "name": "w"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "height of the arc's ellipse by default.",
        "name": "h"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "angle to start the arc, specified in radians.",
        "name": "start"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "angle to stop the arc, specified in radians.",
        "name": "stop"
      },
      {
        "type": {
          "names": [
            "Constant"
          ]
        },
        "optional": true,
        "description": "optional parameter to determine the way of drawing\n                        the arc. either CHORD, PIE, or OPEN.",
        "name": "mode"
      },
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "optional": true,
        "description": "optional parameter for WebGL mode only. This is to\n                        specify the number of vertices that makes up the\n                        perimeter of the arc. Default value is 25. Won't\n                        draw a stroke for a detail of more than 50.",
        "name": "detail"
      }
    ],
    "examples": [
      "<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  arc(50, 50, 80, 80, 0, PI + HALF_PI);\n\n  describe('A white circle on a gray canvas. The top-right quarter of the circle is missing.');\n}\n</code>\n</div>",
      "<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  arc(50, 50, 80, 40, 0, PI + HALF_PI);\n\n  describe('A white ellipse on a gray canvas. The top-right quarter of the ellipse is missing.');\n}\n</code>\n</div>",
      "<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Bottom-right.\n  arc(50, 55, 50, 50, 0, HALF_PI);\n\n  noFill();\n\n  // Bottom-left.\n  arc(50, 55, 60, 60, HALF_PI, PI);\n\n  // Top-left.\n  arc(50, 55, 70, 70, PI, PI + QUARTER_PI);\n\n  // Top-right.\n  arc(50, 55, 80, 80, PI + QUARTER_PI, TWO_PI);\n\n  describe(\n    'A shattered outline of an circle with a quarter of a white circle at the bottom-right.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Default fill mode.\n  arc(50, 50, 80, 80, 0, PI + QUARTER_PI);\n\n  describe('A white circle with the top-right third missing. The bottom is outlined in black.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // OPEN fill mode.\n  arc(50, 50, 80, 80, 0, PI + QUARTER_PI, OPEN);\n\n  describe(\n    'A white circle missing a section from the top-right. The bottom is outlined in black.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // CHORD fill mode.\n  arc(50, 50, 80, 80, 0, PI + QUARTER_PI, CHORD);\n\n  describe('A white circle with a black outline missing a section from the top-right.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // PIE fill mode.\n  arc(50, 50, 80, 80, 0, PI + QUARTER_PI, PIE);\n\n  describe('A white circle with a black outline. The top-right third is missing.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  background(200);\n\n  // PIE fill mode.\n  arc(0, 0, 80, 80, 0, PI + QUARTER_PI, PIE);\n\n  describe('A white circle with a black outline. The top-right third is missing.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  background(200);\n\n  // PIE fill mode with 5 vertices.\n  arc(0, 0, 80, 80, 0, PI + QUARTER_PI, PIE, 5);\n\n  describe('A white circle with a black outline. The top-right third is missing.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  describe('A yellow circle on a black background. The circle opens and closes its mouth.');\n}\n\nfunction draw() {\n  background(0);\n\n  // Style the arc.\n  noStroke();\n  fill(255, 255, 0);\n\n  // Update start and stop angles.\n  let biteSize = PI / 16;\n  let startAngle = biteSize * sin(frameCount * 0.1) + biteSize;\n  let endAngle = TWO_PI - startAngle;\n\n  // Draw the arc.\n  arc(50, 50, 80, 80, startAngle, endAngle, PIE);\n}\n</code>\n</div>"
    ],
    "chainable": true,
    "meta": {
      "lineno": 102,
      "filename": "2d_primitives.js",
      "path": "/home/orasund/gleam-playground/p5js_generator/input"
    },
    "order": 2
  },
  {
    "id": "module:Shape~ellipse",
    "longname": "module:Shape~ellipse",
    "name": "ellipse",
    "kind": "function",
    "scope": "inner",
    "description": "Draws an ellipse (oval).\n\nAn ellipse is a round shape defined by the `x`, `y`, `w`, and\n`h` parameters. `x` and `y` set the location of its center. `w` and\n`h` set its width and height. See\n<a href=\"#/p5/ellipseMode\">ellipseMode()</a> for other ways to set\nits position.\n\nIf no height is set, the value of width is used for both the width and\nheight. If a negative height or width is specified, the absolute value is\ntaken.\n\nThe fifth parameter, `detail`, is also optional. It determines how many\nvertices are used to draw the ellipse in WebGL mode. The default value is\n25.",
    "memberof": "module:Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "x-coordinate of the center of the ellipse.",
        "name": "x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "y-coordinate of the center of the ellipse.",
        "name": "y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "width of the ellipse.",
        "name": "w"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of the ellipse.",
        "name": "h"
      }
    ],
    "examples": [
      "<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  ellipse(50, 50, 80, 80);\n\n  describe('A white circle on a gray canvas.');\n}\n</code>\n</div>",
      "<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  ellipse(50, 50, 80);\n\n  describe('A white circle on a gray canvas.');\n}\n</code>\n</div>",
      "<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  ellipse(50, 50, 80, 40);\n\n  describe('A white ellipse on a gray canvas.');\n}\n</code>\n</div>",
      "<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  background(200);\n\n  ellipse(0, 0, 80, 40);\n\n  describe('A white ellipse on a gray canvas.');\n}\n</code>\n</div>",
      "<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  background(200);\n\n  // Use 6 vertices.\n  ellipse(0, 0, 80, 40, 6);\n\n  describe('A white hexagon on a gray canvas.');\n}\n</code>\n</div>"
    ],
    "chainable": true,
    "meta": {
      "lineno": 373,
      "filename": "2d_primitives.js",
      "path": "/home/orasund/gleam-playground/p5js_generator/input"
    },
    "order": 3
  },
  {
    "id": "module:Shape~ellipse",
    "longname": "module:Shape~ellipse",
    "name": "ellipse",
    "kind": "function",
    "scope": "inner",
    "memberof": "module:Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "w"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "h"
      },
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "optional": true,
        "description": "optional parameter for WebGL mode only. This is to\n                        specify the number of vertices that makes up the\n                        perimeter of the ellipse. Default value is 25. Won't\n                        draw a stroke for a detail of more than 50.",
        "name": "detail"
      }
    ],
    "meta": {
      "lineno": 474,
      "filename": "2d_primitives.js",
      "path": "/home/orasund/gleam-playground/p5js_generator/input"
    },
    "order": 4
  },
  {
    "id": "module:Shape~circle",
    "longname": "module:Shape~circle",
    "name": "circle",
    "kind": "function",
    "scope": "inner",
    "description": "Draws a circle.\n\nA circle is a round shape defined by the `x`, `y`, and `d`\nparameters. `x` and `y` set the location of its center. `d` sets its\nwidth and height (diameter). Every point on the circle's edge is the\nsame distance, `d`, from its center. See\n<a href=\"#/p5/ellipseMode\">ellipseMode()</a> for other ways to set\nits position.",
    "memberof": "module:Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "x-coordinate of the center of the circle.",
        "name": "x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "y-coordinate of the center of the circle.",
        "name": "y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "diameter of the circle.",
        "name": "d"
      }
    ],
    "examples": [
      "<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  circle(50, 50, 25);\n\n  describe('A white circle with black outline in the middle of a gray canvas.');\n}\n</code>\n</div>",
      "<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  background(200);\n\n  circle(0, 0, 25);\n\n  describe('A white circle with black outline in the middle of a gray canvas.');\n}\n</code>\n</div>"
    ],
    "chainable": true,
    "meta": {
      "lineno": 490,
      "filename": "2d_primitives.js",
      "path": "/home/orasund/gleam-playground/p5js_generator/input"
    },
    "order": 5
  },
  {
    "id": "module:Shape~line",
    "longname": "module:Shape~line",
    "name": "line",
    "kind": "function",
    "scope": "inner",
    "description": "Draws a straight line between two points.\n\nA line's default width is one pixel. The version of `line()` with four\nparameters draws the line in 2D. To color a line, use the\n<a href=\"#/p5/stroke\">stroke()</a> function. To change its width, use the\n<a href=\"#/p5/strokeWeight\">strokeWeight()</a> function. A line\ncan't be filled, so the <a href=\"#/p5/fill\">fill()</a> function won't\naffect the line's color.\n\nThe version of `line()` with six parameters allows the line to be drawn in\n3D space. Doing so requires adding the `WEBGL` argument to\n<a href=\"#/p5/createCanvas\">createCanvas()</a>.",
    "memberof": "module:Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the x-coordinate of the first point.",
        "name": "x1"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the y-coordinate of the first point.",
        "name": "y1"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the x-coordinate of the second point.",
        "name": "x2"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the y-coordinate of the second point.",
        "name": "y2"
      }
    ],
    "examples": [
      "<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  line(30, 20, 85, 75);\n\n  describe(\n    'A black line on a gray canvas running from top-center to bottom-right.'\n  );\n}\n</code>\n</div>",
      "<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Style the line.\n  stroke('magenta');\n  strokeWeight(5);\n\n  line(30, 20, 85, 75);\n\n  describe(\n    'A thick, magenta line on a gray canvas running from top-center to bottom-right.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Top.\n  line(30, 20, 85, 20);\n\n  // Right.\n  stroke(126);\n  line(85, 20, 85, 75);\n\n  // Bottom.\n  stroke(255);\n  line(85, 75, 30, 75);\n\n  describe(\n    'Three lines drawn in grayscale on a gray canvas. They form the top, right, and bottom sides of a square.'\n  );\n}\n</code>\n</div>",
      "<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  background(200);\n\n  line(-20, -30, 35, 25);\n\n  describe(\n    'A black line on a gray canvas running from top-center to bottom-right.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe('A black line connecting two spheres. The scene spins slowly.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Rotate around the y-axis.\n  rotateY(frameCount * 0.01);\n\n  // Draw a line.\n  line(0, 0, 0, 30, 20, -10);\n\n  // Draw the center sphere.\n  sphere(10);\n\n  // Translate to the second point.\n  translate(30, 20, -10);\n\n  // Draw the bottom-right sphere.\n  sphere(10);\n}\n</code>\n</div>"
    ],
    "chainable": true,
    "meta": {
      "lineno": 574,
      "filename": "2d_primitives.js",
      "path": "/home/orasund/gleam-playground/p5js_generator/input"
    },
    "order": 6
  },
  {
    "id": "module:Shape~line",
    "longname": "module:Shape~line",
    "name": "line",
    "kind": "function",
    "scope": "inner",
    "memberof": "module:Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x1"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y1"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the z-coordinate of the first point.",
        "name": "z1"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x2"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y2"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the z-coordinate of the second point.",
        "name": "z2"
      }
    ],
    "chainable": true,
    "meta": {
      "lineno": 706,
      "filename": "2d_primitives.js",
      "path": "/home/orasund/gleam-playground/p5js_generator/input"
    },
    "order": 7
  },
  {
    "id": "module:Shape~point",
    "longname": "module:Shape~point",
    "name": "point",
    "kind": "function",
    "scope": "inner",
    "description": "Draws a single point in space.\n\nA point's default width is one pixel. To color a point, use the\n<a href=\"#/p5/stroke\">stroke()</a> function. To change its width, use the\n<a href=\"#/p5/strokeWeight\">strokeWeight()</a> function. A point\ncan't be filled, so the <a href=\"#/p5/fill\">fill()</a> function won't\naffect the point's color.\n\nThe version of `point()` with two parameters allows the point's location to\nbe set with its x- and y-coordinates, as in `point(10, 20)`.\n\nThe version of `point()` with three parameters allows the point to be drawn\nin 3D space with x-, y-, and z-coordinates, as in `point(10, 20, 30)`.\nDoing so requires adding the `WEBGL` argument to\n<a href=\"#/p5/createCanvas\">createCanvas()</a>.\n\nThe version of `point()` with one parameter allows the point's location to\nbe set with a <a href=\"#/p5/p5.Vector\">p5.Vector</a> object.",
    "memberof": "module:Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the x-coordinate.",
        "name": "x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the y-coordinate.",
        "name": "y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "the z-coordinate (for WebGL mode).",
        "name": "z"
      }
    ],
    "examples": [
      "<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Top-left.\n  point(30, 20);\n\n  // Top-right.\n  point(85, 20);\n\n  // Bottom-right.\n  point(85, 75);\n\n  // Bottom-left.\n  point(30, 75);\n\n  describe(\n    'Four small, black points drawn on a gray canvas. The points form the corners of a square.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Top-left.\n  point(30, 20);\n\n  // Top-right.\n  point(70, 20);\n\n  // Style the next points.\n  stroke('purple');\n  strokeWeight(10);\n\n  // Bottom-right.\n  point(70, 80);\n\n  // Bottom-left.\n  point(30, 80);\n\n  describe(\n    'Four points drawn on a gray canvas. Two are black and two are purple. The points form the corners of a square.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Top-left.\n  let a = createVector(30, 20);\n  point(a);\n\n  // Top-right.\n  let b = createVector(70, 20);\n  point(b);\n\n  // Bottom-right.\n  let c = createVector(70, 80);\n  point(c);\n\n  // Bottom-left.\n  let d = createVector(30, 80);\n  point(d);\n\n  describe(\n    'Four small, black points drawn on a gray canvas. The points form the corners of a square.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe('Two purple points drawn on a gray canvas.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Style the points.\n  stroke('purple');\n  strokeWeight(10);\n\n  // Top-left.\n  point(-20, -30);\n\n  // Bottom-right.\n  point(20, 30);\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe('Two purple points drawn on a gray canvas. The scene spins slowly.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Rotate around the y-axis.\n  rotateY(frameCount * 0.01);\n\n  // Style the points.\n  stroke('purple');\n  strokeWeight(10);\n\n  // Top-left.\n  point(-20, -30, 0);\n\n  // Bottom-right.\n  point(20, 30, -50);\n}\n</code>\n</div>"
    ],
    "chainable": true,
    "meta": {
      "lineno": 731,
      "filename": "2d_primitives.js",
      "path": "/home/orasund/gleam-playground/p5js_generator/input"
    },
    "order": 8
  },
  {
    "id": "module:Shape~point",
    "longname": "module:Shape~point",
    "name": "point",
    "kind": "function",
    "scope": "inner",
    "memberof": "module:Shape",
    "params": [
      {
        "type": {
          "names": [
            "p5.Vector"
          ]
        },
        "description": "the coordinate vector.",
        "name": "coordinateVector"
      }
    ],
    "chainable": true,
    "meta": {
      "lineno": 895,
      "filename": "2d_primitives.js",
      "path": "/home/orasund/gleam-playground/p5js_generator/input"
    },
    "order": 9
  },
  {
    "id": "module:Shape~quad",
    "longname": "module:Shape~quad",
    "name": "quad",
    "kind": "function",
    "scope": "inner",
    "description": "Draws a quadrilateral (four-sided shape).\n\nQuadrilaterals include rectangles, squares, rhombuses, and trapezoids. The\nfirst pair of parameters `(x1, y1)` sets the quad's first point. The next\nthree pairs of parameters set the coordinates for its next three points\n`(x2, y2)`, `(x3, y3)`, and `(x4, y4)`. Points should be added in either\nclockwise or counter-clockwise order.\n\nThe version of `quad()` with twelve parameters allows the quad to be drawn\nin 3D space. Doing so requires adding the `WEBGL` argument to\n<a href=\"#/p5/createCanvas\">createCanvas()</a>.\n\nThe thirteenth and fourteenth parameters are optional. In WebGL mode, they\nset the number of segments used to draw the quadrilateral in the x- and\ny-directions. They're both 25 by default.",
    "memberof": "module:Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the x-coordinate of the first point.",
        "name": "x1"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the y-coordinate of the first point.",
        "name": "y1"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the x-coordinate of the second point.",
        "name": "x2"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the y-coordinate of the second point.",
        "name": "y2"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the x-coordinate of the third point.",
        "name": "x3"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the y-coordinate of the third point.",
        "name": "y3"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the x-coordinate of the fourth point.",
        "name": "x4"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the y-coordinate of the fourth point.",
        "name": "y4"
      },
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "optional": true,
        "description": "number of segments in the x-direction.",
        "name": "detailX"
      },
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "optional": true,
        "description": "number of segments in the y-direction.",
        "name": "detailY"
      }
    ],
    "examples": [
      "<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  quad(20, 20, 80, 20, 80, 80, 20, 80);\n\n  describe('A white square with a black outline drawn on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  quad(20, 30, 80, 30, 80, 70, 20, 70);\n\n  describe('A white rectangle with a black outline drawn on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  quad(50, 62, 86, 50, 50, 38, 14, 50);\n\n  describe('A white rhombus with a black outline drawn on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  quad(20, 50, 80, 30, 80, 70, 20, 70);\n\n  describe('A white trapezoid with a black outline drawn on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  background(200);\n\n  quad(-30, -30, 30, -30, 30, 30, -30, 30);\n\n  describe('A white square with a black outline drawn on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe('A wavy white surface spins around on gray canvas.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Rotate around the y-axis.\n  rotateY(frameCount * 0.01);\n\n  // Draw the quad.\n  quad(-30, -30, 0, 30, -30, 0, 30, 30, 20, -30, 30, -20);\n}\n</code>\n</div>"
    ],
    "chainable": true,
    "meta": {
      "lineno": 923,
      "filename": "2d_primitives.js",
      "path": "/home/orasund/gleam-playground/p5js_generator/input"
    },
    "order": 10
  },
  {
    "id": "module:Shape~quad",
    "longname": "module:Shape~quad",
    "name": "quad",
    "kind": "function",
    "scope": "inner",
    "memberof": "module:Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x1"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y1"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the z-coordinate of the first point.",
        "name": "z1"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x2"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y2"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the z-coordinate of the second point.",
        "name": "z2"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x3"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y3"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the z-coordinate of the third point.",
        "name": "z3"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x4"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y4"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "the z-coordinate of the fourth point.",
        "name": "z4"
      },
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "optional": true,
        "name": "detailX"
      },
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "optional": true,
        "name": "detailY"
      }
    ],
    "chainable": true,
    "meta": {
      "lineno": 1043,
      "filename": "2d_primitives.js",
      "path": "/home/orasund/gleam-playground/p5js_generator/input"
    },
    "order": 11
  },
  {
    "id": "module:Shape~rect",
    "longname": "module:Shape~rect",
    "name": "rect",
    "kind": "function",
    "scope": "inner",
    "description": "Draws a rectangle.\n\nA rectangle is a four-sided shape defined by the `x`, `y`, `w`, and `h`\nparameters. `x` and `y` set the location of its top-left corner. `w` sets\nits width and `h` sets its height. Every angle in the rectangle measures\n90˚. See <a href=\"#/p5/rectMode\">rectMode()</a> for other ways to define\nrectangles.\n\nThe version of `rect()` with five parameters creates a rounded rectangle. The\nfifth parameter sets the radius for all four corners.\n\nThe version of `rect()` with eight parameters also creates a rounded\nrectangle. Each of the last four parameters set the radius of a corner. The\nradii start with the top-left corner and move clockwise around the\nrectangle. If any of these parameters are omitted, they are set to the\nvalue of the last radius that was set.",
    "memberof": "module:Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "x-coordinate of the rectangle.",
        "name": "x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "y-coordinate of the rectangle.",
        "name": "y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "width of the rectangle.",
        "name": "w"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "height of the rectangle.",
        "name": "h"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "optional radius of top-left corner.",
        "name": "tl"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "optional radius of top-right corner.",
        "name": "tr"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "optional radius of bottom-right corner.",
        "name": "br"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "optional radius of bottom-left corner.",
        "name": "bl"
      }
    ],
    "examples": [
      "<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  rect(30, 20, 55, 55);\n\n  describe('A white square with a black outline on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  rect(30, 20, 55, 40);\n\n  describe('A white rectangle with a black outline on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Give all corners a radius of 20.\n  rect(30, 20, 55, 50, 20);\n\n  describe('A white rectangle with a black outline and round edges on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Give each corner a unique radius.\n  rect(30, 20, 55, 50, 20, 15, 10, 5);\n\n  describe('A white rectangle with a black outline and round edges of different radii.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  background(200);\n\n  rect(-20, -30, 55, 55);\n\n  describe('A white square with a black outline on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe('A white square spins around on gray canvas.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Rotate around the y-axis.\n  rotateY(frameCount * 0.01);\n\n  // Draw the rectangle.\n  rect(-20, -30, 55, 55);\n}\n</code>\n</div>"
    ],
    "chainable": true,
    "meta": {
      "lineno": 1086,
      "filename": "2d_primitives.js",
      "path": "/home/orasund/gleam-playground/p5js_generator/input"
    },
    "order": 12
  },
  {
    "id": "module:Shape~rect",
    "longname": "module:Shape~rect",
    "name": "rect",
    "kind": "function",
    "scope": "inner",
    "memberof": "module:Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "w"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "name": "h"
      },
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "optional": true,
        "description": "number of segments in the x-direction (for WebGL mode).",
        "name": "detailX"
      },
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "optional": true,
        "description": "number of segments in the y-direction (for WebGL mode).",
        "name": "detailY"
      }
    ],
    "chainable": true,
    "meta": {
      "lineno": 1209,
      "filename": "2d_primitives.js",
      "path": "/home/orasund/gleam-playground/p5js_generator/input"
    },
    "order": 13
  },
  {
    "id": "module:Shape~square",
    "longname": "module:Shape~square",
    "name": "square",
    "kind": "function",
    "scope": "inner",
    "description": "Draws a square.\n\nA square is a four-sided shape defined by the `x`, `y`, and `s`\nparameters. `x` and `y` set the location of its top-left corner. `s` sets\nits width and height. Every angle in the square measures 90˚ and all its\nsides are the same length. See <a href=\"#/p5/rectMode\">rectMode()</a> for\nother ways to define squares.\n\nThe version of `square()` with four parameters creates a rounded square.\nThe fourth parameter sets the radius for all four corners.\n\nThe version of `square()` with seven parameters also creates a rounded\nsquare. Each of the last four parameters set the radius of a corner. The\nradii start with the top-left corner and move clockwise around the\nsquare. If any of these parameters are omitted, they are set to the\nvalue of the last radius that was set.",
    "memberof": "module:Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "x-coordinate of the square.",
        "name": "x"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "y-coordinate of the square.",
        "name": "y"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "side size of the square.",
        "name": "s"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "optional radius of top-left corner.",
        "name": "tl"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "optional radius of top-right corner.",
        "name": "tr"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "optional radius of bottom-right corner.",
        "name": "br"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "optional": true,
        "description": "optional radius of bottom-left corner.",
        "name": "bl"
      }
    ],
    "examples": [
      "<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  square(30, 20, 55);\n\n  describe('A white square with a black outline in on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Give all corners a radius of 20.\n  square(30, 20, 55, 20);\n\n  describe(\n    'A white square with a black outline and round edges on a gray canvas.'\n  );\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  // Give each corner a unique radius.\n  square(30, 20, 55, 20, 15, 10, 5);\n\n  describe('A white square with a black outline and round edges of different radii.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  background(200);\n\n  square(-20, -30, 55);\n\n  describe('A white square with a black outline in on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe('A white square spins around on gray canvas.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Rotate around the y-axis.\n  rotateY(frameCount * 0.01);\n\n  // Draw the square.\n  square(-20, -30, 55);\n}\n</code>\n</div>"
    ],
    "chainable": true,
    "meta": {
      "lineno": 1224,
      "filename": "2d_primitives.js",
      "path": "/home/orasund/gleam-playground/p5js_generator/input"
    },
    "order": 14
  },
  {
    "id": "module:Shape~triangle",
    "longname": "module:Shape~triangle",
    "name": "triangle",
    "kind": "function",
    "scope": "inner",
    "description": "Draws a triangle.\n\nA triangle is a three-sided shape defined by three points. The\nfirst two parameters specify the triangle's first point `(x1, y1)`. The\nmiddle two parameters specify its second point `(x2, y2)`. And the last two\nparameters specify its third point `(x3, y3)`.",
    "memberof": "module:Shape",
    "params": [
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "x-coordinate of the first point.",
        "name": "x1"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "y-coordinate of the first point.",
        "name": "y1"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "x-coordinate of the second point.",
        "name": "x2"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "y-coordinate of the second point.",
        "name": "y2"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "x-coordinate of the third point.",
        "name": "x3"
      },
      {
        "type": {
          "names": [
            "Number"
          ]
        },
        "description": "y-coordinate of the third point.",
        "name": "y3"
      }
    ],
    "examples": [
      "<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100);\n\n  background(200);\n\n  triangle(30, 75, 58, 20, 86, 75);\n\n  describe('A white triangle with a black outline on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  background(200);\n\n  triangle(-20, 25, 8, -30, 36, 25);\n\n  describe('A white triangle with a black outline on a gray canvas.');\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  describe('A white triangle spins around on a gray canvas.');\n}\n\nfunction draw() {\n  background(200);\n\n  // Rotate around the y-axis.\n  rotateY(frameCount * 0.01);\n\n  // Draw the triangle.\n  triangle(-20, 25, 8, -30, 36, 25);\n}\n</code>\n</div>"
    ],
    "chainable": true,
    "meta": {
      "lineno": 1371,
      "filename": "2d_primitives.js",
      "path": "/home/orasund/gleam-playground/p5js_generator/input"
    },
    "order": 15
  }
]
